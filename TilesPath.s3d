class TilesPath{	
	var mTilesObjs;
	var mSteppedTilesObjs;
	var mPathWalked;
	var mColor;
	var mSteppedColor;
	
	
	newTile(mesh, prevTilePos, offsets);
	GetTilesObjs();
	GetSteppedTilesObjs();
	HasBeenWalked();
	GetColor();
	GetSteppedColor();	
};


function TilesPath::TilesPath(pathVector, tilesSize, spaceSize, tilesThickness, startingPos, color, steppedColor){	
	mTilesObjs =  {};
	mSteppedTilesObjs =  {};
	mPathWalked = false;
	mColor = color;
	mSteppedColor = steppedColor;
	
	var tileMesh = CVmNewMesh(VRP_BOX, 1, [-tilesSize/2, -tilesSize/2, 0], [tilesSize/2, tilesSize/2, 0], tilesThickness);
	
	var yOffset = -tilesThickness;
	var xOffset = spaceSize + tilesSize;
	var zOffset = spaceSize + tilesSize;
	
	var tileObj;	
	
	//add the first tile
	tileObj = newTile(tileMesh, [0,0,0], startingPos);
	
//	aadd(mTilesObjs, tileObj);
	
	var direction = [0,0,1,0]; //Defines in which direction the path is going
	for(var i = 0; i < len(pathVector); i++){	
		if(pathVector[i] < 0){
			if(pathVector[i] == -1 && direction.z == 1){
				direction = [1,0,0,1];
			}else if(pathVector[i] == -2 && direction.z == 1){
				direction = [-1,0,0,1];
			}else if(pathVector[i] == -1 && direction.z == -1){
				direction = [-1,0,0,1];			
			}else if(pathVector[i] == -2 && direction.z == -1){
				direction = [1,0,0,1];
			}else if(pathVector[i] == -1 && direction.x == 1){
				direction = [0,0,-1,1];			
			}else if(pathVector[i] == -2 && direction.x == 1){
				direction = [0,0,1,1];
			}else if(pathVector[i] == -1 && direction.x == -1){
				direction = [0,0,1,1];			
			}else if(pathVector[i] == -2 && direction.x == -1){
				direction = [0,0,-1,1];
			}
		}		
		if(direction[3] == 0){
			for(var j = 0; j < pathVector[i]; j++){
				tileObj = newTile(tileMesh, tileObj.GetPosition(), [xOffset*direction.x, yOffset*direction.y, zOffset*direction.z]);				
				aadd(mTilesObjs, tileObj);						
			}			
		}	
		else
			direction[3] = 0;
	}	
}

function TilesPath::newTile(mesh, prevTilePos, offsets){
	var newObj = CVmObj(mesh);
	newObj.rotate(90, 1, 0, 0);
	newObj.SetPosition(prevTilePos.x + offsets.x, prevTilePos.y + offsets.y, prevTilePos.z + offsets.z);	
	return newObj;
}


function TilesPath::GetTilesObjs(){
	return mTilesObjs;
}

function TilesPath::GetSteppedTilesObjs(){
	return mSteppedTilesObjs;
}

function TilesPath::HasBeenWalked(){
	return (len(mTilesObjs) < 1 && len(mTilesObjs) < len(mSteppedTilesObjs));
}

function TilesPath::GetColor(){
	return mColor;
}

function TilesPath::GetSteppedColor(){
	return mSteppedColor;
}