class TilesPath{	
	var mTilesObjs;
	var mSteppedTilesObjs;
	var mPathWalked;
	var mColor;
	var mSteppedColor;
	var mSoundsIndeces;
	var mCurrentSoundIndex;
	
	
	newTile(mesh, prevTilePos, offsets);
	GetTilesObjs();
	GetSteppedTilesObjs();
	HasBeenWalked();
	GetColor();
	GetSteppedColor();	
	GetNextSoundIndex();	
};


function TilesPath::TilesPath(tileMesh, pathVector, tilesWidth, spacing, startingPos, color, steppedColor, soundsRange){	
	mTilesObjs =  {};
	mSteppedTilesObjs =  {};
	mPathWalked = false;
	mColor = color;
	mSteppedColor = steppedColor;
	mSoundsIndeces = {};
	mCurrentSoundIndex = 0;
	if(valtype(soundsRange) == "V"){
		for(var i = soundsRange[0]; i <= soundsRange[1]; i++){
			aadd(mSoundsIndeces, i);
		}	
	}
	
	var yOffset = 0;
	var xOffset = spacing + tilesWidth;
	var zOffset = spacing + tilesWidth;
	
	var tileObj;	
	
	//add the first tile
	tileObj = newTile(tileMesh, [0,0,0], startingPos);
	
//	aadd(mTilesObjs, tileObj);
	
	var direction = [0,0,1,0]; //Defines in which direction the path is going
	for(var i = 0; i < len(pathVector); i++){	
		//If there are two turns in the same direction, than I'm going back on the same path
		if(i < (len(pathVector)-2) && ((pathVector[i] == -1 && pathVector[i+1] == -1) || (pathVector[i] == -2 && pathVector[i+1] == -2))){
			direction = -direction;	//I change the direction to the opposite way
			i+=2;	//I'm going to skip the next peth step (the same turn)
			//The next step should be going back of some tiles, usually the same amount of the previous step in that direction
			//So I'm creating a fake tile in the new position, to avoid drawing on the already drawn tiles
			tileObj = newTile(tileMesh, tileObj.GetPosition(), [xOffset*(pathVector[i])*direction.x, yOffset*direction.y, zOffset*(pathVector[i])*direction.z]);
		}
		else{
			if(pathVector[i] < 0){
				//If the path is going back in the same place
				
				if(pathVector[i] == -1 && direction.z == 1){
					direction = [1,0,0,1];
				}else if(pathVector[i] == -2 && direction.z == 1){
					direction = [-1,0,0,1];
				}else if(pathVector[i] == -1 && direction.z == -1){
					direction = [-1,0,0,1];			
				}else if(pathVector[i] == -2 && direction.z == -1){
					direction = [1,0,0,1];
				}else if(pathVector[i] == -1 && direction.x == 1){
					direction = [0,0,-1,1];			
				}else if(pathVector[i] == -2 && direction.x == 1){
					direction = [0,0,1,1];
				}else if(pathVector[i] == -1 && direction.x == -1){
					direction = [0,0,1,1];			
				}else if(pathVector[i] == -2 && direction.x == -1){
					direction = [0,0,-1,1];
				}
			}	
				
			if(direction[3] == 0){
				for(var j = 0; j < pathVector[i]; j++){
					tileObj = newTile(tileMesh, tileObj.GetPosition(), [xOffset*direction.x, yOffset*direction.y, zOffset*direction.z]);				
					aadd(mTilesObjs, tileObj);						
				}			
			}	
			else
				direction[3] = 0;				
		}
	}	
}

function TilesPath::newTile(mesh, prevTilePos, offsets){
	var newObj = CVmObj(mesh);
	newObj.SetPosition(prevTilePos.x + offsets.x, prevTilePos.y + offsets.y, prevTilePos.z + offsets.z);	
	return newObj;
}


function TilesPath::GetTilesObjs(){
	return mTilesObjs;
}

function TilesPath::GetSteppedTilesObjs(){
	return mSteppedTilesObjs;
}

function TilesPath::HasBeenWalked(){
	return (len(mTilesObjs) < 1 && len(mTilesObjs) < len(mSteppedTilesObjs));
}

function TilesPath::GetColor(){
	return mColor;
}

function TilesPath::GetSteppedColor(){
	return mSteppedColor;
}

function TilesPath::GetNextSoundIndex(){
	mCurrentSoundIndex = (mCurrentSoundIndex == len(mSoundsIndeces)) ? 0 : mCurrentSoundIndex; 
	return mSoundsIndeces[mCurrentSoundIndex++];
}