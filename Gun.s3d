class Gun{
	var mAnimator;
	var mAnimationId;
	
	var mGunMesh;
	var mGunObj;	
	
	var mIsRotated;
	var mGunRotation;
	var mRotationAxis;
	
	var mShootingDelay;
	var mShootingDelayOrig;
	var mRecoilDepth;
	
	var mBulletMesh;
	var mBulletSpeed;
	var mBulletMaxDistance;
	var mBulletMaxLife;
	var mShootType;
	var mShootAnimationTime;
	var mDelayAnimFactor;
	var mLastShotTime;
	var mIsShooting;
	var mBulletPower;
	
	var mViveController;
	
	var mIsVive;
	
	IsShooting();
	UpdateGun();
	SetRotationMatrix(mat);
	Rotate(angle, x, y, z);
	SetPosition(x,y,z);
	Shoot();
	Draw();
	GetObj();
	CreatePickupPoint(pos, rotation, axis);
	Pickup();
	LinkToController(controller);
	UnlinkController();
};

function Gun::Gun(meshName, shootingDelay, recoilDepth, bulletMesh, bulletSpeed, bulletMaxDistance, bulletMaxLife, bulletPower, shootType, animator, animationId){
	mGunMesh = CvmNewMesh(meshName);
	mGunObj= CvmObj(mGunMesh);
	mShootingDelayOrig = shootingDelay;
	mShootingDelay = mShootingDelayOrig;
	mRecoilDepth = recoilDepth;
	mBulletMesh = bulletMesh;
	mBulletSpeed = bulletSpeed;
	mBulletMaxDistance = bulletMaxDistance;
	mBulletMaxLife = bulletMaxLife;
	mShootType = shootType;
	mDelayAnimFactor = 350;
	mShootAnimationTime = mShootingDelay/mDelayAnimFactor;
	mAnimator = animator;
	mAnimationId = animationId;
	mLastShotTime = GetTime();
	mBulletPower = bulletPower;
	mIsVive = false;
	
	mIsShooting = false;
	mIsRotated = false;
}


function Gun::SetRotationMatrix(mat){
	mGunObj.SetRotationMatrix(mat);
}

function Gun::Rotate(angle,x,y,z){
	mIsRotated = true;
	mGunRotation = angle;
	mRotationAxis = [x,y,z];
	mGunObj.Rotate(angle,x,y,z);
}

function Gun::SetPosition(x,y,z){
	if(valtype(x) == "A" || valtype(x) == "V"){
		mGunObj.SetPosition(x);		
	}
	else
		mGunObj.SetPosition(x,y,z);
}

function Gun::Shoot(){
	if(GetTime() - mLastShotTime > mShootingDelay){
		mIsShooting = true;
		mLastShotTime = GetTime();
		mAnimator.CreateGenericTransition(mAnimationId, 0, {mRecoilDepth,0}, mShootAnimationTime, 2);
		if(mShootType == 0){			
			var startPoint = mGunObj.GetPosition();
			var bulletObj = CvmObj(mBulletMesh);
			
			bulletObj.SetRotationMatrix(mGunObj.GetRotationMatrix());
			
			if(!mIsVive){
				if(mIsRotated)
					bulletObj.Rotate(mGunRotation, mRotationAxis.x, mRotationAxis.y, mRotationAxis.z);
				
				var center = mGunObj.LocalToWorld([0, 0, 0]);
				var tip = mGunObj.LocalToWorld([1, 0, 0]);
				
				mAnimator.CreateTransition(bulletObj, startPoint, startPoint+(tip-center)*mBulletMaxDistance, mBulletSpeed ,false, 0);			
			}
			else{
				mAnimator.CreateTransition(bulletObj, startPoint, mViveController.GetDirection()*mBulletMaxDistance, mBulletSpeed ,false, 0);					
			}
			
			return {Bullet(bulletObj, GetTime(), mBulletMaxLife, false, mBulletPower, [1,0,0])};			
		}
		else if(mShootType == 1){		
			var startPoint = mGunObj.GetPosition();
			var bulletObj = CvmObj(mBulletMesh);
			var bulletObj1 = CvmObj(mBulletMesh);
			var bulletObj2 = CvmObj(mBulletMesh);
			
			bulletObj.SetRotationMatrix(mGunObj.GetRotationMatrix());
			bulletObj1.SetRotationMatrix(mGunObj.GetRotationMatrix());
			bulletObj2.SetRotationMatrix(mGunObj.GetRotationMatrix());
			
			if(!mIsVive){
				if(mIsRotated){
					bulletObj.Rotate(mGunRotation, mRotationAxis.x, mRotationAxis.y, mRotationAxis.z);				
					bulletObj1.Rotate(mGunRotation, mRotationAxis.x, mRotationAxis.y, mRotationAxis.z);				
					bulletObj2.Rotate(mGunRotation, mRotationAxis.x, mRotationAxis.y, mRotationAxis.z);				
				}
				
				var center = mGunObj.LocalToWorld([0, 0, 0]);
				var tip = mGunObj.LocalToWorld([1, 0, 0]);			
				mAnimator.CreateTransition(bulletObj, startPoint, startPoint+(tip-center)*mBulletMaxDistance, mBulletSpeed ,false, 0);
				
				
				center = mGunObj.LocalToWorld([0, 0, 0]);
				tip = mGunObj.LocalToWorld([1, 0, 0.02]);			
				mAnimator.CreateTransition(bulletObj1, startPoint, startPoint+(tip-center)*mBulletMaxDistance, mBulletSpeed ,false, 0);
				
				
				center = mGunObj.LocalToWorld([0, 0, 0]);
				tip = mGunObj.LocalToWorld([1, 0, -0.02]);			
				mAnimator.CreateTransition(bulletObj2, startPoint, startPoint+(tip-center)*mBulletMaxDistance, mBulletSpeed ,false, 0);
			}
			else{
				mAnimator.CreateTransition(bulletObj, startPoint, mViveController.GetDirection()*mBulletMaxDistance, mBulletSpeed ,false, 0);
				mAnimator.CreateTransition(bulletObj1, startPoint, (mViveController.GetDirection()-[0,0,0.02])*mBulletMaxDistance, mBulletSpeed ,false, 0);
				mAnimator.CreateTransition(bulletObj2, startPoint, (mViveController.GetDirection()+[0,0,0.02])*mBulletMaxDistance, mBulletSpeed ,false, 0);				
			}
			
			return {Bullet(bulletObj, GetTime(), mBulletMaxLife, false, mBulletPower, [1,0,0]),
					Bullet(bulletObj1, GetTime(), mBulletMaxLife, false, mBulletPower, [1,0,0]),
					Bullet(bulletObj2, GetTime(), mBulletMaxLife, false, mBulletPower, [1,0,0])};					
		}
	}
}

function Gun::IsShooting(){
	return mIsShooting;
}

function Gun::UpdateGun(){
	if(mIsVive){
		mGunObj.SetRotationMatrix(mViveController.GetRotationMatrix());
		mGunObj.SetPosition(mViveController.GetPosition());	
	}
	
	if(KeyPressed("q")){
		mShootingDelay = mShootingDelayOrig/10;
		mShootAnimationTime = mShootingDelay/mDelayAnimFactor;
	}
	else{
		mShootingDelay = mShootingDelayOrig;	
		mShootAnimationTime = mShootingDelay/mDelayAnimFactor;
	}
	
	if(mIsShooting){
		var translateValue = mAnimator.GetCurrentStateInTransition(mAnimationId,6);
		if(translateValue != Void){
			if(!mIsVive){
				var center = mGunObj.LocalToWorld([0, 0, 0]);
				var tip = mGunObj.LocalToWorld([-1, 0, 0]);
				mGunObj.Translate((tip-center)*translateValue);				
			}
			else{
				mGunObj.Translate(-mViveController.GetDirection()*translateValue);					
			}
		}
		else{
			mIsShooting = false;
		}			
	}
}

function Gun::Draw(){
	return mGunObj.Draw();
}

function Gun::GetObj(){
	return mGunObj;
}

function Gun::CreatePickupPoint(pos, rotation, axis){
	if(rotation != Void && axis != Void){
		mGunObj.Rotate(rotation, axis.x, axis.y, axis.z);
	}
	mGunObj.SetPosition(pos);
	mAnimator.CreateRotatingTransition(mGunObj, 0, 360, [0,1,0], 2, true, false);
}

function Gun::Pickup(){
	mAnimator.RemoveTransitionByObject(mGunObj, 1);
}

function Gun::LinkToController(controller){
	mIsVive = true;
	mViveController = controller;
}

function Gun::UnlinkController(){
	mIsVive = false;
}