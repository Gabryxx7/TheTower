class PreviewFrame{
	var mGlassWallObj;
	var glassMesh;
	var verticalBorderMesh;
	var horizzontalBorderMesh;
	
	
	var mMaterial;
	var mPreviewFrameMaterial;
	var mColor;
	var mSelectedColor;
	
	GetObj();
	ChangeImage(tex);
	Draw();
	SetPosition(x,y,z);
	IsBeingPointedBy(mObject, objectPosition, distance);
	ChangeMeshesColor(color, previewColor);
};

function PreviewFrame::PreviewFrame(wallWidth, wallHeight, borderThickness, lightsRangeMin, lightsRangeMax, color, selectedColor, glassAlpha){
	var halfWidth = wallWidth / 2.0;
	var halfHeight = wallHeight / 2.0;
	var halfThickness = borderThickness / 2.0;
	
	mColor = color;
	mSelectedColor = selectedColor;
	
	if(glassAlpha == Void)
		glassAlpha = 0.5;
	
	// The glass mesh is smaller than the wall, because it takes into account the borders
	glassMesh = CVmNewMesh(VRP_PLANE, 1, [-halfWidth + borderThickness, -halfHeight + borderThickness, 0], [halfWidth - borderThickness, halfHeight - borderThickness, 0], 2, 2);		 	
	
	mGlassWallObj = CVmObj(glassMesh);
	
	// Meshes for the borders
	verticalBorderMesh = CVmNewMesh(VRP_PLANE, 1, [-halfThickness, -halfHeight, 0], [halfThickness, halfHeight, 0], 2, 2);
	horizzontalBorderMesh = CVmNewMesh(VRP_PLANE, 1, [-halfWidth + halfThickness, -halfThickness, 0], [halfWidth - halfThickness, halfThickness, 0], 2, 2);
	
	var leftBorderObj = CVmObj(verticalBorderMesh);
	var rightBorderObj = CVmObj(verticalBorderMesh);
	var topBorderObj = CVmObj(horizzontalBorderMesh);
	var bottomBorderObj = CVmObj(horizzontalBorderMesh);
	
	mMaterial = CvmMaterial();
	mMaterial.Ambient = [0, 0, 0];
	mMaterial.Shininess = 0.05;
	mMaterial.Specular = [0,0,0];
	
	mPreviewFrameMaterial = CVmMaterial();
	mPreviewFrameMaterial.Ambient = [0, 0, 0];
	mPreviewFrameMaterial.Shininess = 0.05;
	mPreviewFrameMaterial.Specular = [0,0,0];
	mPreviewFrameMaterial.SetTexture(CVmTexture("thetower.png"));
	
	glassMesh.SetMaterial(mPreviewFrameMaterial);
	verticalBorderMesh.SetMaterial(mMaterial);
	horizzontalBorderMesh.SetMaterial(mMaterial);
	ChangeMeshesColor(mColor, [0.5, 0.5, 0.5]);
	
	// Adding the borders to the wall
	mGlassWallObj.AddChild(leftBorderObj, halfWidth - halfThickness, 0, 0);
	mGlassWallObj.AddChild(rightBorderObj, -halfWidth + halfThickness, 0, 0);
	mGlassWallObj.AddChild(topBorderObj, 0, halfHeight - halfThickness, 0);
	mGlassWallObj.AddChild(bottomBorderObj, 0, -halfHeight + halfThickness, 0);
	AddSilhouetteLinesToPlanarObject(mGlassWallObj, 0.04 * SCALE_FACTOR, wallWidth, wallHeight, 0);
}


function PreviewFrame::GetObj(){
	return mGlassWallObj;
}

function PreviewFrame::Draw(){
	mGlassWallObj.Draw();
}

function PreviewFrame::SetPosition(x,y,z){
	mGlassWallObj.SetPosition(x,y,z);
}

function PreviewFrame::ChangeImage(tex){
	mPreviewFrameMaterial.SetTexture(tex);
}

function PreviewFrame::IsBeingPointedBy(mObject, objectPosition, distance){
	var raycastOrigin = objectPosition;
	var raycastEnd = raycastOrigin + mObject.GetDirection() * distance;
	var contactPoint = IsObjectSelected(raycastOrigin, raycastEnd, mGlassWallObj);
	
	if(contactPoint != Void){
		ChangeMeshesColor(mSelectedColor, [1,1,1]);
		return true;		
	}
	
	ChangeMeshesColor(mColor, [0.8, 0.8, 0.8]);		
	return false;	
}

function PreviewFrame::ChangeMeshesColor(color, previewColor){
		mMaterial.Diffuse = color;
		mMaterial.Emission = color;
		verticalBorderMesh.SetMaterial(mMaterial);
		horizzontalBorderMesh.SetMaterial(mMaterial);
		
		mPreviewFrameMaterial.Diffuse = previewColor;
		mPreviewFrameMaterial.Emission = previewColor;
		glassMesh.SetMaterial(mPreviewFrameMaterial);
	
}