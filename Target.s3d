class Target{	
	var mObj;
	var mMesh;
	
	var mHit;
	var mShootDelay;
	var mTotalLives;
	var mLives;
	var mColor;
	var mActualColor;
	var mHitColor;
	var mLaserColor;
	var mSpeed;
	
	var mColorTransitionTime;
	var mScalingTransitionTime;
	var mHasBeenHit;
	
	var mHitTime;
	var mShootTime;
	var mLaserMesh;
	
	var mAnimator;
	
	var mKilled;
	
	var mLaserSpeed;
	var mLaserMaxDistance;
	var mLaserMaxLife;
	
	var mHasLasers;
	var mMoving;
	var mRotating;
	var mColorTransition;
	
	var mWithBorders;
	var mID;
	var mBulletIndex;
	
	Draw();
	GetObj();
	IsCollidingBBoxOnly(startPos, endPos);
	GetLives();
	Create();
	ResetState();
	RemoveLife(amount);
	Update(mMainRoom);
	UpdateTransition(mMainRoom);
	UpdateColor();
	Kill();
	IsDead();
	Hit();	
	SetPosition(x,y,z);
	GetMesh();
	Shoot(cameraPosition);
	IsCollidingBBox(object);
};

function Target::Target(ID, mesh, obj, lives, shootDelay, color, hitColor, laserColor, speed, hasLasers, moving, rotating, colorTransition, laserSpeed, laserMesh, laserMaxDistance, laserMaxLife, animator, withBorders){
	mAnimator = animator; 
	mMesh = mesh;
	mObj = obj;
	mTotalLives = lives;
	mLives = lives;
	mShootDelay = shootDelay;
	mColor = color;
	mHitColor = hitColor;
	mLaserColor = laserColor;
	mSpeed = speed;
	mActualColor = color;
	mHasLasers = hasLasers;
	mMoving = moving;
	mRotating = rotating;
	mColorTransition = colorTransition;
	mWithBorders = withBorders == Void ? false : withBorders;
	
	mLaserSpeed = laserSpeed;
	mLaserMesh = laserMesh;
	mLaserMaxDistance = laserMaxDistance;
	mLaserMaxLife = laserMaxLife;
	mId = ID;
	mBulletIndex = 0;
	
	mHasBeenHit = false;
	mColorTransitionTime = 0.3;
	
	mScalingTransitionTime = 0.5;
	
	mHitTime = 0;
	mShootTime = 0;
	
	mKilled = false;
	
	if(mRotating){		
		var rotationAxis = [Rand(10) / 10.0, Rand(10) / 10.0, Rand(10) / 10.0];
		mAnimator.CreateRotatingTransition(mObj, 0, 360, rotationAxis, 5.0 + Rand(5) / 2.0, true, false);
	}
	
	if(mColorTransition){
		var color2 = [Rand(10) / 10.0, Rand(10) / 10.0, Rand(10) / 10.0];
		mAnimator.CreateToonShaderColorTransition(mMesh, mColor, color2, 3.5, true);
	}
}

function Target::Draw(){
	if(mWithBorders){
		var scale = mObj.GetScale();
		glCullFace (GL_FRONT);		
		mMesh.ShaderSetParameter(0, "outline", 0, 0);    	
		mObj.SetScale(scale + [0.02, 0.02, 0.02]);
		mObj.Draw();
	
		// Now I draw the front faces
		glCullFace (GL_BACK); 
		mMesh.ShaderSetParameter(0, "outline", 0, 1);   	
		mObj.SetScale(scale);
	}
	mObj.Draw();
//	mObj.DrawBoundingBox();
}

function Target::GetObj(){
	return mObj;
}

function Target::IsCollidingBBoxOnly(startPos, endPos){
	return mObj.IsCollidingBBoxOnly(startPos, endPos);
}

function Target::GetLives(){
	return mLives;
}

function Target::ResetState(){
	mBulletIndex = 0;
	mLives = mTotalLives;
	mKilled = false;	
}

function Target::RemoveLife(amount){
	mLives = mLives - amount;
	return mLives;
}

function Target::Hit(){
	mHasBeenHit = true;
	return !mKilled;
}

function Target::Update(mMainRoom){
	UpdateColor();
	if(!mKilled && mMoving){
		UpdateTransition(mMainRoom);
	}
}

function Target::Kill(){
	mKilled = true;
	mAnimator.CreateScalingTransition(mObj, [1, 1, 1], [0, 0, 0], mScalingTransitionTime, false, 3);
}

function Target::UpdateTransition(mMainRoom){
	if(!mAnimator.HaveTransition(mObj,0)){
		var roomPos = mMainRoom.GetPosition();
		var roomWidthHalved = mMainRoom.GetRoomWidth() / 2.0;
		var roomHeightHalved = mMainRoom.GetRoomHeight() / 2.0;
		var roomDepthHalved = mMainRoom.GetRoomDepth() / 2.0;
		
		var posX = (roomPos.x - mMainRoom.GetRoomWidth() / 2.0) + Rand(mMainRoom.GetRoomWidth() - 10.0 * SCALE_FACTOR);
		var posY = (roomPos.y - mMainRoom.GetRoomHeight() / 2.0 +  5.0 * SCALE_FACTOR) + Rand(mMainRoom.GetRoomHeight() - 10.0 * SCALE_FACTOR);
		var posZ = (roomPos.z) + Rand(mMainRoom.GetRoomDepth() - 10.0 * SCALE_FACTOR);
		
		var targetPos = mObj.GetPosition();
		
		var newPosX = [targetPos.x + roomWidthHalved, targetPos.y, targetPos.z];
		var newPosY = [targetPos.x, targetPos.y + roomHeightHalved, targetPos.z];
		var newPosZ = [targetPos.x, targetPos.y, targetPos.z + roomDepthHalved];
		
		var pos = [0, 0, 0];
		
		pos.x = mMainRoom.IsPointInRoom(newPosX) ? newPosX.x : targetPos.x - roomWidthHalved;
		pos.y = mMainRoom.IsPointInRoom(newPosY) ? newPosY.y : targetPos.y - roomHeightHalved;
		pos.z = mMainRoom.IsPointInRoom(newPosZ) ? newPosZ.z : targetPos.z - roomDepthHalved;

		var time = 3.0;
	
		mAnimator.CreateTransition(mObj, mObj.GetPosition(), [posX, posY, posZ], mSpeed, false, 2);		
	}
}

function Target::UpdateColor(){
	if(mHasBeenHit){
		mHasBeenHit = false;
		mAnimator.RemoveTransitionByObject(mMesh, 4);
		mAnimator.CreateToonShaderColorTransition(mMesh, mHitColor, mColor, mColorTransitionTime, false);
		
		if(!mKilled)
			mAnimator.CreateScalingTransition(mObj, [1, 1, 1], {[0.75, 0.75, 0.75], [1,1,1]}, mColorTransitionTime/2.0, false);
	}
	else{
		
	}
}

function Target::SetPosition(x,y,z){
	mObj.SetPosition(valtype(x) != "A" && valtype(x) != "V" ? [x,y,z] : x);
}

function Target::GetMesh(){
	return mMesh;
}

function Target::IsDead(){
	return mKilled && !mAnimator.HaveTransition(mObj,2);
}

function Target::Shoot(cameraPosition){
	if(GetTime()-mShootTime > mShootDelay && mHasLasers){
		mShootTime = GetTime();
		var pos = mObj.GetPosition();
		var laserObj = CvmObj(mLaserMesh);
		
		// Now I need to rotate the laser object so that it points towards the player. First, I take the direction that goes from the previous 
		// point to the current one. Note that the order of the difference is important: I need the direction that goes from the previous point
		// to the current one
		var vec = Norm(pos - cameraPosition);
		
		// To compute the angle around which to rotate the object, I compute the cross product between this vector and the up vector (the vector
		// that tells me which way is up); the result will be a vector perpendicular to the 2, which I normalize to use it as a normal.
		// I then switch sign, otherwise it turns on the opposite side
		var axis = -Norm(vec ^ [0, 1, 0]);
		
		// I now compute the angle for the rotation. The formula derives from "easy" trigonometry (lookup "finding angle between 2 vectors").
		// I'm not sure why the final angle is shifted by 180 degrees; that's why I subtract 180
		var angle = acos((Norm(vec) * [0, 1, 0])) * RAD_TO_GRAD - 180; 
		
		laserObj.SetRotation(angle, axis.x, axis.y, axis.z);
		
		mAnimator.CreateTransition(laserObj, pos, [cameraPosition.x-pos.x, cameraPosition.y-pos.y, cameraPosition.z-pos.z]*mLaserMaxDistance, mLaserSpeed, false, 0);
		
		return Bullet(laserObj, GetTime(), mLaserMaxLife, true, 1, mLaserColor, mID+" "+str(mBulletIndex++));
	}
	return null;
} 

function Target::IsCollidingBBox(object){
	return mObj.IsCollidingBBox(object);
}

function Target::Create(){
	mAnimator.CreateScalingTransition(mObj, [0.0, 0.0, 0.0], [1,1,1], mScalingTransitionTime*2, false, 3);
}