/*
 *	Ship Race VR
 *  (c) Carlo Casta 2007
 *
 *  ShipRaceVR.s3d - Application "Entry Point"
 */

//global var VR_ON = false;
var HMD = null;

#include <Script3d.h>
#include <Camera.s3d.h>
#include "GameManager.s3d"

/* Set global parameters */
SET SCENE_FOV  = 90;
SET SCENE_NEAR = 0.1;
SET SCENE_FAR  = 1000;
SET AUDIO_MODE = 2;

var mGameManager;

var oldTime = 0;
var newTime = 0;
var dt = 0;

/* Download essential files for game menus */
function OnDownload()
{
	FileDownload("silhouetteShader.glsl");
	FileDownload("toonShader.glsl");
	FileDownload("spotShader.glsl");
	FileDownload("antishader.glsl");
	FileDownload("dashedLineShader.glsl");
	FileDownload("positionCircleShader.glsl");
	FileDownload("drawingShader.glsl");
	FileDownload("colorModulatorShader.glsl");
	FileDownload("provaMesh.AAM");
	FileDownload("data.zip");
	FileDownload("viveControllerModel.AAM");
	FileDownload("Sci-fi-thing.aam");
}

/* Init system - Start GameManager */
function OnInit(params)
{
	SetLocalDir("");	
	
	HMD = CVmExternDLL( "francodll.dll" );
	
	HMD.__AddFunction( C_INT, "IsVRactive");	
	HMD.__AddFunction( C_VOID, "SceneBegin");
	HMD.__AddFunction( C_VOID, "frame_left");
	HMD.__AddFunction( C_VOID, "frame_right");
	HMD.__AddFunction( C_VOID, "SceneEnd");
	HMD.__AddFunction( C_PFLOAT_16, "GetControllerMatrix", C_INT);
	HMD.__AddFunction( C_PFLOAT_16, "GetCameraMatrix");
	HMD.__AddFunction( C_PFLOAT_2, "GetTouchpadCoord", C_INT);
	HMD.__AddFunction( C_PFLOAT_2, "GetTriggerCoord", C_INT);
	HMD.__AddFunction( C_INT, "IsMenuPressed", C_INT);
	HMD.__AddFunction( C_INT, "IsTriggerPressed", C_INT);
	HMD.__AddFunction( C_INT, "IsGripPressed", C_INT);
	HMD.__AddFunction( C_INT, "IsTouchpadPressed", C_INT);
	HMD.__AddFunction( C_VOID, "VibrateController", C_INT, C_INT);
	
	mGameManager = GameManager(HMD);
	
	oldTime = GetTime();
		
//	SceneSetParam(VR_VERTICAL_SYNC, 1);
	
	// I don't know why, but we have to disable the cursor both here and in the InputManager class
	ShowCursor(false);
}

/* Render recursively */
function OnFrame()
{
	mGameManager.Render();
}

/* Game Logic update - recursive */
function OnTimer()
{
	// Delta time computation
	newTime = GetTime();
	dt = (newTime - oldTime) * 0.001;
	oldTime = newTime;
	
	mGameManager.UpdateLogic(dt);
}

/* get rid of warnings by declaring required functions */
function OnExit()
{
}

function DownloadReady()
{
}

function OnError()
{
}

function OnEvent(eventId, param1, param2)
{
	// A scopo di debug c'è un evento che viene chiamato quando si entra nel debug mode; l'id dell'evento è deciso arbitrariamente a 5000 (fino a 2023 
	// sono riservati, quindi ho messo un valore più alto per evitare potenziali overwrite)
	if(eventId == 5000)
	{
		// Il parametro 1 ricevuto dall'evento indica se si sta entrando o uscendo dalla fase di debug (true -> mostra il cursore, false -> nascondi)
		ShowCursor(param1);
	}
}
