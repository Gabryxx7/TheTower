
#define STATUS_ELEVATOR_MOVING 0
#define STATUS_ELEVATOR_ARRIVED 1
#define STATUS_LEVEL_STARTED 2
#define STATUS_LEVEL_ENDING 3

/*
 * This level is strictly related to Level1; most of the things were copied and pasted. Comments will be on the parts that are different
 */
class Level4
{
	var mIsVRon;
	
	var mEnding;
	var mIsLevelCompleted;
	var mEndTimer;
	var mTimeToEnd;
	
	var mLevelStatus;
	
	var mInputManager;
	var mAnimator;
	var mSoundManager;
	
	var mCamera;
	
	var mLight0;
	var mLight1;
	var mLight2;
	var mLight0Position;
	var mLight1Position;
	var mLight2Position;
	
	var mMainRoom;
	var mElevator;
	
	var mElevatorFinalPosition;
	var mElevatorTravelDistance;
	var mElevatorTravelTime;
	var mCameraYoffset;
	
	var mOpenglTranslationOffset;
	
	// Array containing the Vive controllers (ViveController objects), if VR is on; also, array containing duplicates and the currently 
	// visible controllers (among real ones and duplicates)
	var mControllersArray;
	var mControllersDuplicateArray;
	var mCurrentlyVisibleControllersArray;
	
	var mIsDrawing;
	var mDrawingShader;
	var mLinesTimeVariable;
	var mPreviousPoint;
	var mKeepEveryLine;

	var mDrawingsArray;
	var mDrawingsAlphaArray;
	var mIsDrawingConnectedArray;
	
	var mControllerBeingUsedIndex;
	var mControllersInLightArray;
	var mIsControllerInLight;
	
	var mConnectors;
	var mConnectorsGroups;
	
	// This variable contains the index of the currently active group among the ones in the mConnectorsGroups array 
	var mCurrentActiveGroup;
	
	var mStartingConnectorsArray;
	var mStartingActiveConnector;
	var mGoodStartingPoint;
	var mCurrentActiveConnector;
	
	var mConnectorsGroupLinkedCounter;
	
	// Text objects used in the level
	var mFrontText;
	var mBackText; 
	var mLeftText; 
	
	
	// This float holds the value that is the threshold used to fade things out from one side or the other of the level
	var mDistanceToZaxisThreshold;
	
	// Previous alpha value for the connectors; used to make them disappear/appear when you walk to/away from them
	var mPreviousAlpha;
			
	// This boolean is true if the left side of the room is being mirrored, or false if it's the opposite side being mirrored
	var mMirrorSideIsLeft;
		
	// Debug controller when no VR is available; a controller is needed to find collisions with the DrawingConnector objects
	var mDebugController;
	var mDebugControllerHidden;
	var mDebugKeyHit;
	
	// Private functions
	CheckActiveConnector();
	HandleDrawings();
	
	// Public functions
	Init(lights, elevator, openglTranslationOffset);
	Render();
	UpdateLogic(dt);
	IsLevelCompleted();
	IsPointedPositionValid(rayOrigin, rayEnd, contactPoint, normal, isWall);
	SetOpenglTransformOffset(mOpenglTranslationOffset);
	SetupOpenglLights();
};

function Level4::Level4(isVRon, inputManager, soundManager)
{		
	mIsVRon = isVRon;
	
	mInputManager = inputManager;
	mSoundManager = soundManager;
	
	mEnding = false;
	mIsLevelCompleted = false;
	mTimeToEnd = 2500;
		
	mIsDrawing = false;
	mGoodStartingPoint = false;
		
	mAnimator = Animator();
	
	mMainRoom = Room(ROOM_FAR_WALL_WIDTH - 25 * SCALE_FACTOR, ROOM_SIDE_WALL_WIDTH - 25 * SCALE_FACTOR, ROOM_HEIGHT, true, 1, 2);
	
	
	mDrawingShader = CVmShaderProgram("drawingShader.glsl");
	mLinesTimeVariable = 0;
	
	var offsetFromFarWall = mMainRoom.GetRoomDepth()/2 - 20.0 * SCALE_FACTOR;
	var offset = 20 * SCALE_FACTOR;
	
	// The first 2 connectors that appear
	var connector1 = DrawingsConnector([1.0, 0, 0], 1, 2);
	connector1.SetPosition([-offset, 0, -offsetFromFarWall]);
	connector1.Rotate(15, 0, 1, 0);
	
	var connector2 = DrawingsConnector([0, 0, 1], 1, 2);
	connector2.SetPosition([offset, 0, -offsetFromFarWall]);
	connector2.Rotate(203, 0, 1, 0);
	
	// This is group 1: the connectors in front of the elevator
	connector1.SetLinkedConnector(connector2);
	connector2.SetLinkedConnector(connector1);
	
	// The second group of connectors
	var connector3 = DrawingsConnector([1.0, 1.0, 0.0], 1, 2);
	connector3.SetPosition([-offset, 0, offsetFromFarWall]);
	connector3.Rotate(15, 0, 1, 0);
	
	var connector4 = DrawingsConnector([0.0, 1.0, 1.0], 1, 2);
	connector4.SetPosition([offset, 0, offsetFromFarWall]);
	connector4.Rotate(203, 0, 1, 0);
	
	connector4.SetLinkedConnector(connector3);
    connector3.SetLinkedConnector(connector4);
    
    // Initially these connectors are hidden
    connector3.Hide();
    connector4.Hide();

	mConnectors = {};
	
	aadd(mConnectors, connector1);
	aadd(mConnectors, connector2);
	aadd(mConnectors, connector3);
	aadd(mConnectors, connector4);
	
	mConnectorsGroups = {};
	
	aadd(mConnectorsGroups, {connector1, connector2});
	aadd(mConnectorsGroups, {connector3, connector4});
	
	mConnectorsGroupLinkedCounter = 0;
	mCurrentActiveGroup = 0;
	
	// Initially the mirror side is the left one
	mMirrorSideIsLeft = true;
	
	mIsControllerInLight = false;
	mControllersInLightArray = {false, false};
	
	mControllerBeingUsedIndex = 0;
	
	mControllersArray = {};
	mControllersDuplicateArray = {};
	mCurrentlyVisibleControllersArray = {};
		
	if(mIsVRon)
	{
		var controller1 = mInputManager.GetController(1);
		var controller2 = mInputManager.GetController(2);
		
		aadd(mControllersArray, controller1);
		aadd(mControllersArray, controller2);
		
		aadd(mCurrentlyVisibleControllersArray, controller1);
		aadd(mCurrentlyVisibleControllersArray, controller2);
		
		// I create the duplicates of the controllers so that I can move them around in the mirrored side
		var controllerDuplicate1 = ViveController(1);
		var controllersDuplicate2 = ViveController(2);
		
		// Initially these controllers are the visible ones
		aadd(mControllersDuplicateArray, controllerDuplicate1);
		aadd(mControllersDuplicateArray, controllersDuplicate2);
	}
	else
	{
		// If no VR is on, I create a debug controller, needed to check collisions. It will work just like a real controller, for the logic of the game I mean
		mDebugController = ViveController(1);
		global var controllerHidden = false;
		global var keyhit = false;
		mDebugController.SetRotation(90, 0, 1, 0);

		aadd(mControllersArray, mDebugController);
		aadd(mCurrentlyVisibleControllersArray, mDebugController);
		
		// I need to create the second controller too so that I don't have differentiate the rest of the code when VR is on or off, but I hide it
		var controllerDuplicate2 = ViveController(2);
		controllerDuplicate2.Hide();
		
		var controllerDuplicate1 = ViveController(1);
		aadd(mControllersDuplicateArray, controllerDuplicate1);
		aadd(mControllersDuplicateArray, controllerDuplicate2);
	}
	
	
	mDrawingsArray = {};
	mDrawingsAlphaArray = {};
	mIsDrawingConnectedArray = {};
	mStartingConnectorsArray = {};
	
	mKeepEveryLine = false;
	
	mDistanceToZaxisThreshold = 10.0 * SCALE_FACTOR;
	mPreviousAlpha = 0;
	
	// Creating texts object for the scene
	mFrontText = Text("If you can't find your hands,\nmaybe you're looking in the wrong place", 2.0);
	mFrontText.Rotate(180, 0, 1, 0);

	mBackText = Text(" If you need to connect things together but can't\nreach them, maybe you don't really need to", 1.0);
	mBackText.Rotate(180, 0, 1, 0);
	
	mLeftText = Text("Not all connections need to be made physically", 2.0);
	mLeftText.Rotate(270, 0, 1, 0);
}


 
 function Level4::Init(lights, elevator, openglTransformOffset)
{	
	mOpenglTranslationOffset = openglTransformOffset;
	
	foreach(var light in lights)
		light.Disable();
		
	mLight0Position = [-10.0 * SCALE_FACTOR, 10.0 * SCALE_FACTOR, 10.0 * SCALE_FACTOR] + [0, -100 * SCALE_FACTOR, 0];
	mLight1Position = [0, 10.0 * SCALE_FACTOR, 10.0 * SCALE_FACTOR];
	mLight2Position = [0, 10.0 * SCALE_FACTOR, -20.0 * SCALE_FACTOR];
	
	mLight0 = lights[0];
	mLight0.SetPosition(mLight0Position);
	mLight0.SetDiffuse(1, 1, 1);
	mLight0.Enable();
	
	mLight1 = lights[1];
	mLight1.SetPosition(mLight1Position);
	mLight1.SetDiffuse(1, 1, 1);
	mLight1.Enable();
	
	mLight2 = lights[2];
	mLight2.SetPosition(mLight2Position);
	mLight2.SetDiffuse(1, 1, 1);
	mLight2.Enable();
	
		
	mElevator = elevator;
	mElevator.SetLightsRange(0,0);
	
	mCamera = mInputManager.GetActiveCamera();
	
	mElevatorTravelDistance = 100.0 * SCALE_FACTOR;
	mElevatorTravelTime = !DEBUG_MODE ? 15.0 : 1.5;
	
	mElevatorFinalPosition = mElevator.GetPosition();
	
	mAnimator.CreateTransition(mElevator, mElevatorFinalPosition + [0, -mElevatorTravelDistance, 0], mElevatorFinalPosition, mElevatorTravelTime, false);
	
	mCameraYoffset = mCamera.GetPosition().y - mOpenglTranslationOffset.y - mElevatorFinalPosition.y;
	
	mLevelStatus = STATUS_ELEVATOR_MOVING;
	
	// I move the room a bit so that the elevator is completely in the center of the room
	mMainRoom.Translate(-mElevator.GetRoomDepth() / 2.0 + 3.0 * SCALE_FACTOR, 0, -mElevator.GetRoomWidth() / 2.0);
	
	// I set now the position of a text that needed to know where the elevator was
	mFrontText.SetPosition([0, 7.0 * SCALE_FACTOR, mMainRoom.GetRoomDepth()/2 - 0.1 * SCALE_FACTOR -mElevator.GetRoomWidth() / 2.0]);
	mBackText.SetPosition(mElevatorFinalPosition + [0.1 * SCALE_FACTOR, 1 * SCALE_FACTOR, -0.1 * SCALE_FACTOR]);
	mLeftText.SetPosition([mMainRoom.GetRoomWidth()/2 - 2.1 * SCALE_FACTOR, 7.0 * SCALE_FACTOR, -mElevator.GetRoomWidth() / 2.0]);
}


/* ****************************************************** *
 * **************** RENDER METHODS ********************** *
 * ****************************************************** */


/*
 * Render method
 */
function Level4::Render()
{	
	glLight(GL_LIGHT0, GL_POSITION, [mLight0Position.x, mLight0Position.y, mLight0Position.z, 1.0]); 
 	glLight(GL_LIGHT1, GL_POSITION, [mLight1Position.x, mLight1Position.y, mLight1Position.z, 1.0]); 
 	glLight(GL_LIGHT2, GL_POSITION, [mLight2Position.x, mLight2Position.y, mLight2Position.z, 1.0]);	
	
	mElevator.Draw();

	// Drawing the controllers and their duplicates. If any controller is invisible, the draw will have no effect
	for(var i = 0; i < len(mControllersArray); i++)
	{
		mControllersArray[i].Draw();
		mControllersDuplicateArray[i].Draw();
	}
	
	switch(mLevelStatus)
	{
		case STATUS_ELEVATOR_MOVING:
			break;
		case STATUS_ELEVATOR_ARRIVED:
		case STATUS_LEVEL_ENDING:
		case STATUS_LEVEL_STARTED:
		{
			mMainRoom.Draw();

			glLineWidth(5);
			
			mDrawingShader.Start();	
				mDrawingShader.SetParameter("time", mLinesTimeVariable);

				for(var i = 0; i < len(mDrawingsArray); i++)
				{
					var vertexArray = mDrawingsArray[i];

					if(mIsDrawingConnectedArray[i])
					{
						var startingConnector = mStartingConnectorsArray[i];
						var linkedConnector = startingConnector.GetLinkedConnector();
						
						mDrawingShader.SetParameter("lineIsConnected", true);
						mDrawingShader.SetParameter("startColor", startingConnector.GetDefaultLightColor());
						mDrawingShader.SetParameter("finalColor", linkedConnector.GetDefaultLightColor());
						mDrawingShader.SetParameter("startPoint", startingConnector.GetPosition());
						mDrawingShader.SetParameter("endPoint", linkedConnector.GetPosition());
					}
					else
					{
						var alpha = mDrawingsAlphaArray[i];
						mDrawingShader.SetParameter("alpha", alpha);
						mDrawingShader.SetParameter("lineIsConnected", false);
					}
					
					for(var i = 0; i < len(vertexArray); i += 2)
					{
						var point0 = vertexArray[i];
						var point1 = vertexArray[i+1];
						
						glBegin(GL_LINES);
							glVertex(point0);
							glVertex(point1);		
						glEnd();
					}
				}
			mDrawingShader.Stop();
			
			mLinesTimeVariable += 0.01;
			
			
			// Drawing the texts
			mFrontText.Draw();
			mBackText.Draw();
			mLeftText.Draw();
			
			foreach(var connector in mConnectors)
			{
				connector.UpdateTimeVariable();
				connector.Draw();
			}
			
			glDepthMask(GL_FALSE); 
			
			foreach(var connector in mConnectors)
				connector.DrawLightCone(false);
			
			glDepthMask(GL_TRUE); 

			break;
		}
	}
}


/* ****************************************************** *
 * **************** LOGIC METHODS ********************** *
 * ****************************************************** */
  
/*
 * Updates the logic of the game
 * 
 * dt: (float) delta time, i.e. the time between the last update and this one
 */
function Level4::UpdateLogic(dt)
{
	mInputManager.UpdateCamera();
	mInputManager.UpdateControllers(mOpenglTranslationOffset);
	
	var cameraPosition = mCamera.GetPosition() - mOpenglTranslationOffset;
	
	// I put the controller in front of the camera, for the debugging purposes, if VR isn't on
	if(!mIsVRon)
	{
		mDebugController.SetPosition(mCamera.GetPosition() - mOpenglTranslationOffset + mCamera.GetDirection() * 3 * SCALE_FACTOR);
		
		if(KeyPressed("Y"))
		{
			if(!mDebugKeyHit)
			{
				if(mDebugControllerHidden)
					mDebugController.Unhide();
				else
					mDebugController.Hide();
					
				mDebugControllerHidden = !mDebugControllerHidden;
				mDebugKeyHit = true;
			}
		}
		else
			mDebugKeyHit = false;
		
		static var rotX = 0;
		static var rotY = 0;
		static var rotZ = 0;
			
		if(KeyPressed("J"))
			rotX += 1;
		
		if(KeyPressed("L"))
			rotX -= 1;
			
		if(KeyPressed("I"))
			rotY += 1;
		
		if(KeyPressed("K"))
			rotY -= 1;
			
		if(KeyPressed("U"))
			rotZ += 1;
		
		if(KeyPressed("O"))
			rotZ -= 1;
		
		mDebugController.SetRotation(0, 1, 0, 0);
		mDebugController.Rotate(rotY, 1, 0, 0);
		mDebugController.Rotate(rotX, 0, 1, 0);
		mDebugController.Rotate(rotZ, 0, 0, 1);
	}
	
	switch(mLevelStatus)
	{
		case STATUS_ELEVATOR_MOVING: 
		{			
		    if(!mIsVRon && !mElevator.IsPointInElevator(cameraPosition))
		    	mInputManager.RestoreCameraPosition();
			
			var elevatorPos = mElevator.GetPosition();

			if(abs(elevatorPos.y) < (mElevatorFinalPosition.y + mElevatorTravelDistance)/2.0 && mElevator.GetLightsRange().y < 1)
				 mElevator.SetLightsRange(1,2);
			
			cameraPosition.y = mCameraYoffset + elevatorPos.y;
	   	    
		    cameraPosition.y += Rand(1) == 0 ? Rand(8)/500.0 : -Rand(8)/500.0;
		    cameraPosition.x += Rand(1) == 0 ? Rand(8)/500.0 : -Rand(8)/500.0;
			
			mCamera.SetPosition(cameraPosition + mOpenglTranslationOffset);
			
			if(elevatorPos.y >= mElevatorFinalPosition.y)
			{
				var leftDoorPos = mElevator.GetLeftDoor().GetPosition();
				var rightDoorPos = mElevator.GetRightDoor().GetPosition();
				
				mAnimator.CreateTransition(mElevator.GetLeftDoor(), leftDoorPos, mElevator.GetLeftDoorOpenPosition(), 2.0, false);
				mAnimator.CreateTransition(mElevator.GetRightDoor(), rightDoorPos, mElevator.GetRightDoorOpenPosition(), 2.0, false);
				
				mLevelStatus = STATUS_ELEVATOR_ARRIVED;
			}
	
			break;
		}		
		case STATUS_ELEVATOR_ARRIVED:
		{
			if(!mElevator.IsPointInElevator(cameraPosition))
			{
				var leftDoorPos = mElevator.GetLeftDoor().GetPosition();
				var rightDoorPos = mElevator.GetRightDoor().GetPosition();

				mAnimator.CreateTransition(mElevator.GetLeftDoor(), leftDoorPos, mElevator.GetLeftDoorClosedPosition(), 2.0, false);
				mAnimator.CreateTransition(mElevator.GetRightDoor(), rightDoorPos, mElevator.GetRightDoorClosedPosition(), 2.0, false);
								
				mLevelStatus = STATUS_LEVEL_STARTED;
			}
			
			break;
		}
		// Case where the player is out of the elevator. It's the main status of the level
		case STATUS_LEVEL_STARTED:
		{
			if(!mIsVRon && mElevator.IsPointInElevator(cameraPosition) || !mMainRoom.IsPointInRoom(cameraPosition))
		    	mInputManager.RestoreCameraPosition();
		    	
	    	// Now I have to change the position of the duplicates controller so that they mirror the real ones
	    	for(var i = 0; i < len(mControllersArray); i++)
    		{
    			var controller = mControllersArray[i];
    			var controllerDuplicate = mControllersDuplicateArray[i];
	
				/*
				  This code below is to rotate the duplicate so that it mirrors exactly the real controllers; it's not being used anymore but
				  I leave it here because it took me a while to figure it out and it might be useful in the future
				
				var matrix3 = [ rotationMatrix[0], rotationMatrix[1], rotationMatrix[2],
							    rotationMatrix[4], rotationMatrix[5], rotationMatrix[6], 
							    rotationMatrix[8], rotationMatrix[9], rotationMatrix[10] ];
							    
			    var quaternion = Matrix3ToQuaternion(matrix3);
				var euler = QuaternionToEuler(quaternion);
				    			
    			mControllersDuplicateArray[i].SetRotationMatrix(rotationMatrix);

				var angle = 180 - euler[1] * 2.0;
				
				mControllersDuplicateArray[i].Rotate(angle, 0, 1, 0);
				*/

    			var controllerPos = controller.GetPosition();
    			
    			// The z coordinate where the side ends is 0. Depending on what is the mirror side, in order to check if the controller has changed side
    			// I need to check if its z coordinate is positive or negative
    			var isNotInMirrorSide = mMirrorSideIsLeft ? controllerPos.z >= 0 : controllerPos.z <= 0;
				    			
    			// If the real controller is NOT in the mirror side and it was visible, I need to hide it and show the duplicate    	
		    	if(isNotInMirrorSide && controller.IsVisible())
    			{
    				controller.Hide();
    				controllerDuplicate.Unhide();
    				
    				// I set that the duplicate is visible now
    				mCurrentlyVisibleControllersArray[i] = controllerDuplicate;
    			}
    			// If the real controller is in the mirror side and wasn't visible before, I unhide it
    			else if(!isNotInMirrorSide && !controller.IsVisible())
    			{
    				controller.Unhide();
    				controllerDuplicate.Hide();
    				mCurrentlyVisibleControllersArray[i] = controller;
    			}
    			
    			// If the duplicate controller is visible, I change its position to mirror the real one
    			if(controllerDuplicate.IsVisible())
    			{
    				// I set the rotation matrix
	    			var rotationMatrix = controller.GetRotationMatrix();
	    			controllerDuplicate.SetRotationMatrix(rotationMatrix);
	    			
	    			// I only need to change the z coordinates of the real controller's position so that it has the opposite sign
					controllerPos.z = -controllerPos.z;
	    			controllerDuplicate.SetPosition(controllerPos);
    			}
    		}
		    
		    // Now I have to check if the player is near the threshold around the z = 0 axis, and in that case change the alpha of the connectors accordingly.
		    // Depending on which is the side that works as a mirror, I take the z position of the camera
    		var distanceFromZaxis = mMirrorSideIsLeft ? cameraPosition.z : -cameraPosition.z;
    			
			// I compute the alpha value. Basically to compute it I normalize the current distance with the threshold distance
    		var alphaValue = distanceFromZaxis / mDistanceToZaxisThreshold;
    		
    		// I make sure that the range is always between 0 and 1
    		if(alphaValue >= 1.0)
    			alphaValue = 1.0;
			else if(alphaValue <= 0)
				alphaValue = 0.0;
				    		
    		// Now depending on the alpha value I need to hide/unhide or modify the alpha of the connectors in the currently active group
			foreach(var connector in mConnectorsGroups[mCurrentActiveGroup])
    		{
    			// If the player crossed the axis and before the alpha wasn't zero then it's the first time he's crossing, so I hide the connector
				if(alphaValue <= 0 && mPreviousAlpha > 0)
					connector.Hide();
				// Same thing but going to the other side
				else if(alphaValue > 0 && mPreviousAlpha <= 0)
					connector.Unhide();

				// If the connector is visible, I change its alpha value
				if(!connector.IsHidden())
    				connector.SetAlpha(alphaValue);
    		}
    		
    		// Now I can update the previous alpha value
			mPreviousAlpha = alphaValue;
    		
	    	// Now I can handle the connectors and the drawings
			CheckActiveConnector();
    		HandleDrawings();
			
			// Now I have to check if the current active group has been connected. The check is a little bit different than the one in Level1, since I need
			// to check only 1 group at the time; a difference is that I don't remove groups from the array, even if they're all connected
			var currentConnectors = mConnectorsGroups[mCurrentActiveGroup];
			var allConnected = true;
			
			for(var i = 0; i < len(currentConnectors) && allConnected; i++)
				allConnected = currentConnectors[i].IsConnected();
							
			// If every connector in the group is connected, I switch to the next one which is currently the last group
			if(allConnected)
			{
				mSoundManager.PlaySound(mConnectorsGroupLinkedCounter, true, 1);
				mConnectorsGroupLinkedCounter++;
				
				// I update the counter and reset the alpha value, used to hide/unhide the connectors
				mCurrentActiveGroup++;
				mPreviousAlpha = 0;
				
				// I change the text behind the elevator
				mBackText.LoadString("When connections are created,\nthe world around you might change");
				
				// I set that the side that is mirrored is the opposite one now
				mMirrorSideIsLeft = !mMirrorSideIsLeft;
			}
			
			// I check if every connector has been connected
			if(len(mConnectorsGroups) == mConnectorsGroupLinkedCounter)
			{
				var leftDoorPos = mElevator.GetLeftDoor().GetPosition();
				var rightDoorPos = mElevator.GetRightDoor().GetPosition();
				
				mAnimator.CreateTransition(mElevator.GetLeftDoor(), leftDoorPos, mElevator.GetLeftDoorOpenPosition(), 2.0, false);
				mAnimator.CreateTransition(mElevator.GetRightDoor(), rightDoorPos, mElevator.GetRightDoorOpenPosition(), 2.0, false);
				
				mLevelStatus = STATUS_LEVEL_ENDING;
				
				// Now I have to unhide the controllers and hide the duplicate ones
				for(var i = 0; i < len(mControllersArray); i++)
				{
					mControllersArray[i].Unhide();
					mControllersDuplicateArray[i].Hide();
				}
			}
			
			break;
		}
		// Case where the level is ending: the only thing missing is the player inside the elevator
		case STATUS_LEVEL_ENDING:
		{
			// I check if the player goes inside the elevator. Note: I'm not checking that he enter from the doors; he can pass through walls right now
			if(mElevator.IsPointInElevator(cameraPosition) && !mEnding)
			{
				var leftDoorPos = mElevator.GetLeftDoor().GetPosition();
				var rightDoorPos = mElevator.GetRightDoor().GetPosition();

				mAnimator.CreateTransition(mElevator.GetLeftDoor(), leftDoorPos, mElevator.GetLeftDoorClosedPosition(), 2.0, false);
				mAnimator.CreateTransition(mElevator.GetRightDoor(), rightDoorPos, mElevator.GetRightDoorClosedPosition(), 2.0, false);
								
				// If the player is in, I start the timer to end the level
				mEnding = true;
				mEndTimer = GetTime();
			}
			
			// If the game is ending and it's been a while (so the doors of the elevator are closed now), I save the fact that the level has been completed
			if(mEnding && GetTime() - mEndTimer > mTimeToEnd)
				mIsLevelCompleted = true;
			
			break;
		}
	}
		
	// I update the methods of the managers
	mAnimator.UpdateTransitions(dt);
	mSoundManager.UpdateMusic(dt);
}

/*
 * This method works the same as the one in Level1, except for the array of connectors used for the check
 */
function Level4::CheckActiveConnector()
{
	// I check only the connectors in the currently active group
	foreach(var connector in mConnectorsGroups[mCurrentActiveGroup])
	{
		// I have to check if any of the available controllers (the visible ones) is going inside or outside of a connector
		foreach(var controller in mCurrentlyVisibleControllersArray)
		{
			var controllerIndex = controller.GetIndex();
			var controllerAlreadyInLight = mControllersInLightArray[controllerIndex - 1];
			
			var isControllerInside = connector != mStartingActiveConnector && connector.IsObjectInCone(controller.GetObj()) && !controllerAlreadyInLight;
			
			if(connector.HasConnectionsAvailable() && isControllerInside || mIsDrawing && isControllerInside && connector.HasLinksAvailable())
			{
				mControllersInLightArray[controllerIndex - 1] = true;
				
				if(!mIsControllerInLight)
				{
					connector.UpdateColor();
					mIsControllerInLight = true;
					mCurrentActiveConnector = connector;
				}
			}
			else if(!connector.IsConnected() && connector == mCurrentActiveConnector && mIsControllerInLight  && !connector.IsObjectInCone(controller.GetObj()))
			{
				mControllersInLightArray[controllerIndex - 1] = false;
				
				var noControllersLeftInLight = !mControllersInLightArray[0] && !mControllersInLightArray[1];

				if(noControllersLeftInLight)
				{
					if(mCurrentActiveConnector != mStartingActiveConnector)
						connector.ResetLightColor();
						
					mIsControllerInLight = false;
					mCurrentActiveConnector = Void;
				}
			}
		}
	}
}

/*
 * This method works the same as the one in Level1, except for the array of controllers used to check the points
 */
function Level4::HandleDrawings()
{
	// Now I check if the player is drawing; I first check if he pressed a button
	var usingController1 = mInputManager.IsPressingPrimaryButton(1);
	var usingController2 = mInputManager.IsPressingPrimaryButton(2);
	
	var firstTimeUsingController = (usingController1 || usingController2) && mControllerBeingUsedIndex == 0;
	var wasUsingController1 = (usingController1 && mControllerBeingUsedIndex == 1);
	var wasUsingController2 = (usingController2 && mControllerBeingUsedIndex == 2);
		 
	if(firstTimeUsingController || wasUsingController1 || wasUsingController2)
	{				
		if(firstTimeUsingController)
		{
			mControllerBeingUsedIndex = usingController1 ? 1 : 2;
			mIsDrawing = true;
			
			// I get the first point in the drawing; I obtain the controller in the array that holds the currently visible controllers
			mPreviousPoint = mCurrentlyVisibleControllersArray[mControllerBeingUsedIndex - 1].GetPosition();
				
			var vertexArray = {};
			
			aadd(mDrawingsArray, vertexArray);
			aadd(mDrawingsAlphaArray, 1.0);
						
			// Now I have to check if the controller's index is the same as one of the controllers that is currently inside a connector (if there is any);
			// so, the first thing I need to do is get the index of this controller (from the array of the currently visible ones)
			var controllerIndex = mCurrentlyVisibleControllersArray[mControllerBeingUsedIndex - 1].GetIndex();
				
			var controllerWasInsideLight = mControllersInLightArray[controllerIndex - 1];
			
			if(mCurrentActiveConnector != Void && controllerWasInsideLight)
			{	    				
				aadd(mIsDrawingConnectedArray, true);
				
				mGoodStartingPoint = true;
				mStartingActiveConnector = mCurrentActiveConnector;
				aadd(mStartingConnectorsArray, mCurrentActiveConnector);
			}
			else
			{
				aadd(mIsDrawingConnectedArray, false);
				aadd(mStartingConnectorsArray, Void);
			}
		}
		else
		{
			var currentPoint;

			currentPoint = mCurrentlyVisibleControllersArray[mControllerBeingUsedIndex - 1].GetPosition();
					
			var vertexArray = mDrawingsArray[len(mDrawingsArray) - 1];
			
			aadd(vertexArray, mPreviousPoint);
			aadd(vertexArray, currentPoint);
			
			mPreviousPoint = currentPoint;
		}
	}
	// Case where the user is not drawing
	else
	{
		// If the user was drawing until now, I need to check where he stopped
		if(mControllerBeingUsedIndex != 0)
		{
			var isControllerInLight = mControllersInLightArray[mControllerBeingUsedIndex - 1];
			
			if(mCurrentActiveConnector != Void && !mCurrentActiveConnector.IsConnected() && mGoodStartingPoint && isControllerInLight)
			{
				if(mStartingActiveConnector.GetLinkedConnector() == mCurrentActiveConnector)
				{
					mStartingActiveConnector.ConnectionFound(true);
					mCurrentActiveConnector.ConnectionFound(false);
					
					var linkedConnector = mCurrentActiveConnector.GetLinkedConnector();
					
					if(linkedConnector != Void && linkedConnector == mStartingActiveConnector)
					{
						mStartingActiveConnector.ConnectionFound(false);
						mCurrentActiveConnector.ConnectionFound(true);
					}
					
					mStartingActiveConnector = Void;
					mCurrentActiveConnector = Void;
					mIsControllerInLight = false;
					mControllersInLightArray[0] = false;
					mControllersInLightArray[1] = false;
				}
				else
				{
					mIsDrawingConnectedArray[len(mIsDrawingConnectedArray) - 1] = false;
					mStartingActiveConnector.ResetLightColor();
					mStartingActiveConnector = Void;
				}
			}	
			else
			{    					
				if(mStartingActiveConnector != Void)
				{
					mIsDrawingConnectedArray[len(mIsDrawingConnectedArray) - 1] = false;
					mStartingActiveConnector.ResetLightColor();
					mStartingActiveConnector = Void;
				}
			}
				
			mGoodStartingPoint = false;
			mControllerBeingUsedIndex = 0;
			mIsDrawing = false;
		}
	}
	

	if(mInputManager.HasPressedMenuButton(1) || mInputManager.HasPressedMenuButton(2))
		mKeepEveryLine = !mKeepEveryLine;
	
	var startingPoint = mIsDrawing ? len(mDrawingsAlphaArray) - 2 : len(mDrawingsAlphaArray) - 1;
		
	for(var i = startingPoint; i >= 0; i--)
	{
		if(!mIsDrawingConnectedArray[i] && !mKeepEveryLine)
		{
			if(mDrawingsAlphaArray[i] > -1.0)
				mDrawingsAlphaArray[i] -= 0.01;
			else
			{
				adel(mDrawingsArray, i);
				adel(mDrawingsAlphaArray, i);
				adel(mIsDrawingConnectedArray, i);
				adel(mStartingConnectorsArray, i);
			}
		}
	}
}


/*
 * This method checks where the given ray intersects the world, and returns true if that position is valid for the player
 * 
 * rayOrigin: (vector) starting point of the ray
 * rayEnd: (vector) starting point of the ray
 * contactPoint: (vector) if the ray intersects something, this parameter will be filled up with the information (needs to be passed as reference, with &)
 * normal: (vector) if the ray intersects something, this parameter will be filled up with the normal to the intersected plane (needs to be passed as reference, with &)
 * isWall: (boolean) if the ray intersects something, this parameter will be true if the interception was in a wall (needs to be passed as reference, with &)
 */
function Level4::IsPointedPositionValid(rayOrigin, rayEnd, contactPoint, normal, isWall)
{
	var intersectedPlane = -1;

	intersectedPlane = mElevator.CheckIntersection(rayOrigin, rayEnd, &contactPoint, &normal);

	if(intersectedPlane == -1)
		intersectedPlane = mMainRoom.CheckIntersection(rayOrigin, rayEnd, &contactPoint, &normal);
		
	isWall = true;
	
	return intersectedPlane == 0;
}


/*
 * Method called by the GameManager to check if the level is completed
 */
function Level4::IsLevelCompleted()
{
	return mIsLevelCompleted;
}

function Level4::SetOpenglTransformOffset(openglTransformOffset)
{
	mOpenglTranslationOffset = openglTransformOffset;
}

function Level4::SetupOpenglLights()
{
	glEnable(GL_LIGHT0);
	glEnable(GL_LIGHT1);
	glEnable(GL_LIGHT2);
	
	// Note: might need to SUBTRACT mOpenglTranslationOffset to each axis position
	glLight(GL_LIGHT0, GL_POSITION, [mLight0Position.x, mLight0Position.y, mLight0Position.z, 1.0]); 
 	glLight(GL_LIGHT1, GL_POSITION, [mLight1Position.x, mLight1Position.y, mLight1Position.z, 1.0]); 
 	glLight(GL_LIGHT2, GL_POSITION, [mLight2Position.x, mLight2Position.y, mLight2Position.z, 1.0]); 
 	
	glLight(GL_LIGHT0, GL_DIFFUSE, [1, 1, 1]); 
	glLight(GL_LIGHT1, GL_DIFFUSE, [1, 1, 1]); 
	glLight(GL_LIGHT2, GL_DIFFUSE, [1, 1, 1]);
}
