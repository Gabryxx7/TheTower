
/*
 * Class that represents a DrawingsConnector, which is basically a lamp light that does something when the user starts drawing inside the light
 */
class DrawingsConnector
{
	// Mesh of the connector object, and CVmObject containing also the light cone
	var mConnectorMesh;
	var mConnector;
	
	// Meshes for the light cone; I keep track of them in order to change the parameters of their shaders
	var mLightConeMesh;
	var mLightTopCircleMesh;
	var mLightBottomCircleMesh;
	
	// Light cone frustum object
	var mLightConeObj;
	
	// Colors of the light and the position offset of the light cone frustum with respect to the connector object
	var mLightConeDefaultColor;   // Default color
	var mLightConeActiveColor;    // Currently active color (it's based on mLightConeConnectedColor's values)
	var mLightConeConnectedColor; // Color for the "finished" state of the light
		
	// Shader for the black borders
	var mSilhouetteShader;
	var mBorderShader;
	
	// This is the DrawingsConnector object linked to this connector (i.e. it's the connector that the player must draw to)
	var mLinkedConnector;
	
	// Time variable, used for creating dynamic effects with the shader; needs to be updated in the Level class at each frame
	var mTime;
	
	// Booelan that is true if this connector has finished its purpose (i.e. all of his connections have been found)
	var mIsConnected;
	
	// Total number of connections, number of connections that this connector created, number of times it was linked to another connector, 
	// and the counter of the connections that have been found until now
	var mNumberOfConnections;
	var mConnectionsCreated;
	var mTimesLinked;
	var mConnectionsCounter;
	
	// Private functions
	IncrementConnectionsCounter();
		
	// Public functions
	Draw();
	DrawLightCone();
	GetObj();
	GetDefaultLightColor();
	UpdateColor();
	ResetLightColor();
	SetLightsRange(min, max);
	GetLightsRange();
	LocalToWorld(point);
	SetPosition(position);
	GetPosition();
	Rotate(angle, x, y, z);
	SetRotation(angle, x, y, z);
	Translate(x, y, z);
	UpdateTimeVariable();
	IsObjectInCone(object);
	SetLinkedConnector(linkedConnector);
	GetLinkedConnector();
	IsConnected();
	ConnectionFound(isConnectionCreator);
	HasConnectionsAvailable();
	HasLinksAvailable();
	
	// Private functions
	SetLightColorConnected();
};


/*
 * Constructors; the parameters are the color of the light and the range of lights used for rendering with the Toon Shader
 */
function DrawingsConnector::DrawingsConnector(lightColor, lightsRangeMin, lightsRangeMax)
{
	mLightConeDefaultColor = lightColor;
	mLightConeActiveColor = lightColor;
	mLightConeConnectedColor = [0, 1, 0];
	
	mIsConnected = false;
	mNumberOfConnections = 0;
	mConnectionsCounter = 0;
	mConnectionsCreated = 0;
	mTimesLinked = 0;
	mTime = 0;
	
	// I get the mesh and scale it
	mConnectorMesh = CVmNewMesh("Sci-fi-thing.aam");
	mConnectorMesh.Scale(SCALE_FACTOR, SCALE_FACTOR, SCALE_FACTOR);
	
	// Shader for the first (the "arm" of the object) and second subset (the column)
	if(USE_TOON_SHADER == 2)
	{		
		mConnectorMesh.ShaderAdd("antishader.glsl", 0);
		mConnectorMesh.ShaderAdd("antishader.glsl", 1);
		mConnectorMesh.ShaderActivate(true);
	}
	else if(USE_TOON_SHADER == 1)
	{
		mConnectorMesh.ShaderAdd("toonShader.glsl", 0);
		mConnectorMesh.ShaderAdd("toonShader.glsl", 1);
		mConnectorMesh.ShaderActivate(true);		
	}
	else if(USE_TOON_SHADER == 0)
		mConnectorMesh.ShaderActivate(false);				

	// Parameters for subset 0 (the "arm" of the object)
	mConnectorMesh.ShaderSetParameter(0, "ambient", 0, [0.7, 0.7, 0.7]);
	mConnectorMesh.ShaderSetParameter(0, "diffuse", 0, lightColor);
	mConnectorMesh.ShaderSetParameter(0, "specular", 0, [0.0, 0.0, 0.0]);
	mConnectorMesh.ShaderSetParameter(0, "shininess", 0, 0);
	mConnectorMesh.ShaderSetParameter(0, "lightsRangeMin", 0, lightsRangeMin);
	mConnectorMesh.ShaderSetParameter(0, "lightsRangeMax", 0, lightsRangeMax);
	mConnectorMesh.ShaderSetParameter(0, "SCALE_FACTOR", 0, SCALE_FACTOR);
	
	var color = lightColor - [0.9, 0.9, 0.9];
	color.r = color.r < 0 ? 0 : color.r;
	color.g = color.g < 0 ? 0 : color.g;
	color.b = color.b < 0 ? 0 : color.b;
	
	// Parameters for subset 1 (the column of the object)
	mConnectorMesh.ShaderSetParameter(1, "ambient", 0, [0.2, 0.2, 0.2]);
	mConnectorMesh.ShaderSetParameter(1, "diffuse", 0, [0.3, 0.3, 0.3]);
//	mConnectorMesh.ShaderSetParameter(1, "diffuse", 0, color);
	mConnectorMesh.ShaderSetParameter(1, "specular", 0, [0.0, 0.0, 0.0]);
	mConnectorMesh.ShaderSetParameter(1, "shininess", 0, 0);
	mConnectorMesh.ShaderSetParameter(1, "lightsRangeMin", 0, lightsRangeMin);
	mConnectorMesh.ShaderSetParameter(1, "lightsRangeMax", 0, lightsRangeMax);
	mConnectorMesh.ShaderSetParameter(1, "SCALE_FACTOR", 0, SCALE_FACTOR);
	
	mConnector = CVmObj(mConnectorMesh);
	
	// I get the bounding box in order to obtain the total height of the object (the y values of the bounding box are in positions 1 and 4)
	var boundingBox = mConnectorMesh.GetBoundingBox();
	var connectorHeight = boundingBox[1] + boundingBox[4];
	
	// The object is positioned in a weird way, and so it's the bounding box. In order to rotate the object easily I compute a new pivot point
	// for rotations, which is set pretty much where the light of the object starts
	var pivotPoint = [boundingBox[3], boundingBox[4], boundingBox[5] - boundingBox[5] / 4.0];
	mConnector.SetPivotPoint(pivotPoint);
	
	// The light cone is actually a cone frustum, with 2 circle of these radius and this height
	var topCircleRadius = 0.69 * SCALE_FACTOR;
	var bottomCircleRadius = 2.2 * SCALE_FACTOR;
	var lightConeHeight = connectorHeight - 0.14 * SCALE_FACTOR;
	
	// I create the cone frustum without the top and bottom circles, and I create these circles separately. I do this because otherwise if you went
	// inside the light cone you wouldn't see the circles from the inside; so to fix this I simply put circle meshes in place of the cone's ones
	mLightConeMesh = CVmNewMesh(VRP_CONEFRUSTUM, 30, topCircleRadius, lightConeHeight, bottomCircleRadius, 0);  
	mLightTopCircleMesh = CVmNewMesh(VRP_CIRCLE, 30, topCircleRadius, 1);  
	mLightBottomCircleMesh = CVmNewMesh(VRP_CIRCLE, 30, bottomCircleRadius, 1);  

	// Each mesh has the same shader, with the same color
	mLightConeMesh.ShaderAdd("colorModulatorShader.glsl", 0);
	mLightConeMesh.ShaderActivate(true);
	mLightConeMesh.ShaderSetParameter(0, "startingColor", 0, mLightConeDefaultColor);		
	mLightConeMesh.ShaderSetParameter(0, "finalColor", 0, mLightConeDefaultColor);
	mLightConeMesh.ShaderSetParameter(0, "time", 0, 0);
	mLightConeMesh.ShaderSetParameter(0, "alpha", 0, 0.15);
	
	mLightTopCircleMesh.ShaderAdd("colorModulatorShader.glsl", 0);
	mLightTopCircleMesh.ShaderActivate(true);		
	mLightTopCircleMesh.ShaderSetParameter(0, "startingColor", 0, mLightConeDefaultColor);
	mLightTopCircleMesh.ShaderSetParameter(0, "finalColor", 0, mLightConeDefaultColor);
	mLightTopCircleMesh.ShaderSetParameter(0, "time", 0, 0);
	mLightTopCircleMesh.ShaderSetParameter(0, "alpha", 0, 0.15);
	
	mLightBottomCircleMesh.ShaderAdd("colorModulatorShader.glsl", 0);
	mLightBottomCircleMesh.ShaderActivate(true);		
	mLightBottomCircleMesh.ShaderSetParameter(0, "startingColor", 0, mLightConeDefaultColor);
	mLightBottomCircleMesh.ShaderSetParameter(0, "finalColor", 0, mLightConeDefaultColor);
	mLightBottomCircleMesh.ShaderSetParameter(0, "time", 0, 0);
	mLightBottomCircleMesh.ShaderSetParameter(0, "alpha", 0, 0.15);
	
	// Creating the CVmObjects with the respective meshes
	mLightConeObj = CVmObj(mLightConeMesh);
	var topCircleObj = CVmObj(mLightTopCircleMesh);
	var bottomCircleObj = CVmObj(mLightBottomCircleMesh);
	
	// This is the offset position that the light cone has to have with respect to the connector object's position. I found this
	// by trying values pretty much at random
	var lightConeOffset = [-1.18 * SCALE_FACTOR, 0 * SCALE_FACTOR, -2.21 * SCALE_FACTOR];
	
	// Now I add every object as child of the connector object. I don't add the 2 circles as children of the light cone because it would give some problems
	// with the transparency (because of the order they would be rendered). I also put as children the circles first because this way they are rendered first
	// (again, to avoid problems with transparency).
	// I position every object taking into account that the origin of the cone frustum is at the center of the base
	mConnector.AddChild(topCircleObj, lightConeOffset.x, lightConeOffset.y + lightConeHeight, lightConeOffset.z);
	mConnector.AddChild(bottomCircleObj, lightConeOffset.x, lightConeOffset.y, lightConeOffset.z);
	mConnector.AddChild(mLightConeObj, lightConeOffset.x, lightConeOffset.y, lightConeOffset.z);

	// Creating the shader for the silhouette; the silhouetteShader is actually unused for now. Since the object is kind of weird looking, it works
	// really bad unless the offset for the silhouette is very very low. I found that by creating a shader that simply draws black (the mBorderShader)
	// and by enlarging the mesh a little bit, use the shader and then reset the scale and draw it normally gives better results for this particular object
	mSilhouetteShader = CVmShaderProgram("silhouetteShader.glsl");
	mBorderShader = CVmShaderProgram("void main(void) { gl_Position = ftransform(); }", "void main (void) { gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0); }", true);
}

/*
 * This draws ONLY the connector object, WITHOUT the light cone
 */
function DrawingsConnector::Draw()
{
	// I'm going to draw the silhouette first, so I'm drawing only the back faces now
	glCullFace(GL_FRONT);
	
	// Deactivate the current shader, otherwise the border shader won't work
	mConnectorMesh.ShaderActivate(false);
	
	// I increase a little bit the size of the object, so that it will be a little bigger. I don't need to scale the factors, 
	// since I already scaled the mesh according to the SCALE_FACTOR before
	mConnector.SetScale(1.004 , 1.004, 1.004);
	
	// I draw the connector with NO children, for 2 reasons:
	// 1) only the object needs to have the silhouette, not the light cone
	// 2) I need to draw it alone first because the light cone has transparency, and apparently there is no way to tell XVR to draw the parent before
	//    the children; this caused the light cone to be drawn before the object, and that meant that the transparency didn't take the object into account,
	//    and so if you would have placed yourself in front of the light cone the object would have been totally invisible.
	//    The only quick solution that I've found for this is to draw the object first with no children, and then again but with the children.
	//    Not putting the light cone as child of the object in order to draw them separately wasn't an option, since when the objects rotates it's hard
	//    to place the light cone accordingly, while it's automatic if the light cone is a child of the object
	mBorderShader.Start();
		mConnector.Draw(VR_NO_CHILDREN);
	mBorderShader.Stop();
	
	// Now I draw the front faces
	glCullFace (GL_BACK);
	
	// Reactivate the shader and reset the scale
	mConnectorMesh.ShaderActivate(true);
	mConnector.SetScale(1, 1, 1);
	
	// Draw the connector, again with no cilhdren
	mConnector.Draw(VR_NO_CHILDREN);
}

function DrawingsConnector::DrawLightCone()
{
	glCullFace(GL_BACK);

	// Now that the connector object is in the depth buffer, I draw it again with the light cone; I only draw the front faces
	mConnector.Draw();
	
	// Now I draw also the back faces; I do this because otherwise if you went inside the light cone you would "attraverse it", disrupting the illusion
	// that it's a light. If I also draw the back faces, whenever you get inside the cone you'll keep seeing the light's color
	glCullFace(GL_FRONT);
	mConnector.Draw();	
	
	// I reset the culling to back faces, for future drawings
	glCullFace(GL_BACK);	
}

/*
 * This method changes the current color to the one in the next "stage"
 */
function DrawingsConnector::UpdateColor()
{		
	// I get the previous color
	var previousColor = mLightConeActiveColor;
	
	// I check that status of the connections. For example, if there are 2 connections (one created and 1 linked) and they're still not found, then I set 
	// the color to half of the mLightConeConnectedColor; if there are for example 3 connections and I found one, I set the color to a third of that instead
	mLightConeActiveColor = (mLightConeConnectedColor / mNumberOfConnections) * (mConnectionsCounter + 1);
	
	// I also change the alpha of the light cone if I'm in an advanced stage (i.e. getting closer to the end) so that the light cone is more dense
	var alpha = 0.15 + 0.03 * mConnectionsCounter;
	
	var startingColor;
	
	// If the time variable is below 1, it means that there was already a color animation going on; so to make the change to this new color fluid, I
	// start from the current color, which I compute recreating the "mix()" function of the opengl shader here
	if(mTime <= 1.0)
		startingColor = mLightConeActiveColor * (1 - mTime) + previousColor * mTime;
	// If the time is over 1, there is no need of finding a color
	else
		startingColor = previousColor;
	
	// I reset the time for the animation
	mTime = 0;
	
	// I pass all the colors to the shaders
	mLightConeMesh.ShaderSetParameter(0, "startingColor", 0, startingColor);
	mLightTopCircleMesh.ShaderSetParameter(0, "startingColor", 0, startingColor);
	mLightBottomCircleMesh.ShaderSetParameter(0, "startingColor", 0, startingColor);
			
	mLightConeMesh.ShaderSetParameter(0, "finalColor", 0, mLightConeActiveColor);
	mLightTopCircleMesh.ShaderSetParameter(0, "finalColor", 0, mLightConeActiveColor);
	mLightBottomCircleMesh.ShaderSetParameter(0, "finalColor", 0, mLightConeActiveColor);
	
	// I pass the alpha value
	mLightConeMesh.ShaderSetParameter(0, "alpha", 0, alpha);
	mLightTopCircleMesh.ShaderSetParameter(0, "alpha", 0, alpha);
	mLightBottomCircleMesh.ShaderSetParameter(0, "alpha", 0, alpha);
}


/*
 * This function brings the light color to the default color of the current "stage"
 */
function DrawingsConnector::ResetLightColor()
{
	var resetColor;
	
	// If no connections have been found, I need to reset the color to the default one; otherwise, I compute the current color I need to reset to,
	// which depend on the current stage I'm in (i.e. how many conections have been found)
	if(mConnectionsCounter == 0) 
		resetColor = mLightConeDefaultColor;
	else
		resetColor = (mLightConeConnectedColor / mNumberOfConnections) * mConnectionsCounter;

	var startingColor;
	
	// Similar to the UpdateColor() function, if the time is <= 0 there is an animation active, so I need to find the current color
	if(mTime <= 1.0)
		startingColor = resetColor * (1 - mTime) + mLightConeActiveColor * mTime;
	else
		startingColor = mLightConeActiveColor;
	
	
	var alpha = 0.15 + 0.03 * (mConnectionsCounter);
	
	mTime = 0;
		
	mLightConeActiveColor = resetColor;
		
	mLightConeMesh.ShaderSetParameter(0, "startingColor", 0, startingColor);
	mLightTopCircleMesh.ShaderSetParameter(0, "startingColor", 0, startingColor);
	mLightBottomCircleMesh.ShaderSetParameter(0, "startingColor", 0, startingColor);
		
	mLightConeMesh.ShaderSetParameter(0, "finalColor", 0, resetColor);
	mLightTopCircleMesh.ShaderSetParameter(0, "finalColor", 0, resetColor);
	mLightBottomCircleMesh.ShaderSetParameter(0, "finalColor", 0, resetColor);
	
	mLightConeMesh.ShaderSetParameter(0, "alpha", 0, alpha);
	mLightTopCircleMesh.ShaderSetParameter(0, "alpha", 0, alpha);
	mLightBottomCircleMesh.ShaderSetParameter(0, "alpha", 0, alpha);
}

/*
 * This method sets the light to the final color; the method works the same as the previous ones basically
 */
function DrawingsConnector::SetLightColorConnected()
{	
	var startingColor;
	
	if(mTime <= 1.0)
		startingColor = mLightConeActiveColor * (1 - mTime) + mLightConeConnectedColor * mTime;
	else
		startingColor = mLightConeActiveColor;
	
	var alpha = 0.15 + 0.03 * mConnectionsCounter;
	
	mTime = 0;
		
	mLightConeMesh.ShaderSetParameter(0, "startingColor", 0, startingColor);
	mLightTopCircleMesh.ShaderSetParameter(0, "startingColor", 0, startingColor);
	mLightBottomCircleMesh.ShaderSetParameter(0, "startingColor", 0, startingColor);
		
	mLightConeMesh.ShaderSetParameter(0, "finalColor", 0, mLightConeConnectedColor);
	mLightTopCircleMesh.ShaderSetParameter(0, "finalColor", 0, mLightConeConnectedColor);
	mLightBottomCircleMesh.ShaderSetParameter(0, "finalColor", 0, mLightConeConnectedColor);
	
	mLightConeMesh.ShaderSetParameter(0, "alpha", 0, alpha);
	mLightTopCircleMesh.ShaderSetParameter(0, "alpha", 0, alpha);
	mLightBottomCircleMesh.ShaderSetParameter(0, "alpha", 0, alpha);
}

function DrawingsConnector::GetDefaultLightColor()
{
	return mLightConeDefaultColor;
}

/*
 * This function updates the time parameter for the shaders; it needs to be constantly called each frame by the current Level class
 */
function DrawingsConnector::UpdateTimeVariable()
{		
	mTime += 0.03;
	
	mLightConeMesh.ShaderSetParameter(0, "time", 0, mTime);
	mLightTopCircleMesh.ShaderSetParameter(0, "time", 0, mTime);
	mLightBottomCircleMesh.ShaderSetParameter(0, "time", 0, mTime);
}


function DrawingsConnector::SetPosition(position)
{
	mConnector.SetPosition(position);
}

function DrawingsConnector::Translate(x, y, z)
{
	mConnector.Translate(x, y, z);
}

function DrawingsConnector::Rotate(angle, x, y, z)
{
	mConnector.Rotate(angle, x, y, z);
}

function DrawingsConnector::SetRotation(angle, x, y, z)
{
	mConnector.SetRotation(angle, x, y, z);
}


function DrawingsConnector::GetPosition()
{
	return mConnector.GetPosition();
}


function DrawingsConnector::LocalToWorld(point)
{
	return mConnector.LocalToWorld(point);
}

function DrawingsConnector::GetObj()
{
	return mConnector;
}

function DrawingsConnector::IsObjectInCone(object)
{
	return mLightConeObj.IsCollidingBBox(object);
}


/*
 * This method creates a connection from the current connector the one passed as parameter (another DrawingsConnector object)
 */
function DrawingsConnector::SetLinkedConnector(linkedConnector)
{
	// Since the parameter has been linked, I update its counter
	linkedConnector.IncrementConnectionsCounter();
	
	// I save the linked connector and update my own counters
	mLinkedConnector = linkedConnector;
	mNumberOfConnections++;
	mConnectionsCreated++;
}

function DrawingsConnector::GetLinkedConnector()
{
	return mLinkedConnector;
}


function DrawingsConnector::IsConnected()
{
	return mIsConnected;
}


function DrawingsConnector::IncrementConnectionsCounter()
{
	mTimesLinked++;
	mNumberOfConnections++;
}

function DrawingsConnector::ConnectionFound(isConnectionCreator)
{
	if(isConnectionCreator)
		mConnectionsCreated--;
	else
		mTimesLinked--;
		
	mConnectionsCounter++;
		
	// If there are no connections left (both created or linked) then this connector has reached its purpose, so I set the color to the final one
	if(mConnectionsCreated == 0 && mTimesLinked == 0)
	{
		mIsConnected = true;
		SetLightColorConnected();
	}	
}

function DrawingsConnector::HasConnectionsAvailable()
{
	return mConnectionsCreated > 0;
}

function DrawingsConnector::HasLinksAvailable()
{
	return mTimesLinked > 0;
}