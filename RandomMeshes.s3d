class RandomMeshes{	
	var mObjsArray;
	var mObjsOrigAngles;
	var mObjsOrigPos;
	var mObjsFinalAngles;
	var mObjsFinalPos;
	var mObjsAnimations;
	var mColor;
	var mMeshSize;
	var mNumberSpacing;
	var mNumberDirection;
	var mBoxPosition;
	
	GetObjs();
	GetAnimationsVector();
	GetOriginalPos();
	GetFinalPos();
	GetOriginalAngles();
	GetFinalAngles();
	GetColor();	
	GetBoxPosition();
	SetFinalPos();
	
	MoveToFinalPosition(animator);
	SetFinalPosition(number, pos);
	GenerateFinalPositions(number, pos);
	GenerateRandomPositions(boxSize, boxPos);
};


function RandomMeshes::RandomMeshes(mesh, amount, boxSize, boxPosition, color, meshSize, numberSpacing, numberDirection){
	mObjsArray = {};
	mObjsOrigPos = {};	
	mObjsFinalPos = {};	
	mObjsOrigAngles = {};
	mObjsFinalAngles = {};	
	mObjsAnimations = {};
	mColor = color;
	mMeshSize = meshSize;
	mNumberSpacing = numberSpacing;
	mNumberDirection = numberDirection;
	mBoxPosition = boxPosition;
	
	var offset = [1*SCALE_FACTOR, 0.5*SCALE_FACTOR, 1*SCALE_FACTOR];
	var randomx = 0;
	var randomy = 0;
	var randomz = 0;
	
	for(var i = 0; i < amount; i++){		
		aadd(mObjsArray, CvmObj(mesh));
		aadd(mObjsFinalPos, [0,0,0]);
		
		aadd(mObjsOrigAngles,[Rand(3600.0)/10.0, Rand(3600.0)/10.0, Rand(3600.0)/10.0]);
		mObjsArray[i].SetRotation(mObjsOrigAngles[i].x, 1, 0, 0);
		mObjsArray[i].SetRotation(mObjsOrigAngles[i].y, 0, 1, 0);
		mObjsArray[i].SetRotation(mObjsOrigAngles[i].z, 0, 0, 1);
		
		aadd(mObjsOrigPos, GenerateRandomPositions(boxSize, boxPosition));
		mObjsArray[i].SetPosition(mObjsOrigPos[i].x, mObjsOrigPos[i].y, mObjsOrigPos[i].z);
	}	
}

function RandomMeshes::GetObjs(){	
	return mObjsArray;
}

function RandomMeshes::GetAnimationsVector(){
	return mObjsAnimations;
}

function RandomMeshes::GetOriginalPos(){
	return mObjsOrigPos;
}

function RandomMeshes::GetFinalPos(){
	return mObjsFinalPos;
}

function RandomMeshes::GetOriginalAngles(){
	return mObjsOrigAngles;
}

function RandomMeshes::GetFinalAngles(){
	return mObjsFinalAngles;
}

function RandomMeshes::GetColor(){
	return mColor;
}

function RandomMeshes::GetBoxPosition(){
	return mBoxPosition;
}

function RandomMeshes::SetFinalPosition(number, pos){
	var finalPositions = GenerateFinalPositions(number, pos);
	for(var i = 0; i < len(mObjsFinalPos); i++){
		mObjsFinalPos[i] = finalPositions[i];
	}		
}

function RandomMeshes::GenerateFinalPositions(number, pos){
	var finalPositions = GenerateNumberPositions(number, pos, mMeshSize, mNumberSpacing, mNumberDirection);

	var finalObjPos = {};
	
	var j = 0;
	while(len(finalObjPos) < len(mObjsArray)){
		aadd(finalObjPos, finalPositions[j]);
		j = (j+1)% len(finalPositions);
	}
	return finalObjPos;	
}

function RandomMeshes::MoveToFinalPosition(mAnimator){
	var time = 0;
	var objPos;
	
	for(var i = 0; i < len(mObjsArray); i++){
		objPos = mObjsArray[i].GetPosition();
		time = (Rand(1000)+ 1000)/ 300;
				

		mAnimator.RemoveTransitionByObject(mObjsArray[i], 3);	//The animation is starting so I remove the rotation around a point animation
//		mAnimator.CreateTransition(mObjsArray[i], objPos, {[mObjsFinalPos[i].x, objPos.y, objPos.z], [mObjsFinalPos[i].x, mObjsFinalPos[i].y, objPos.z], [mObjsFinalPos[i].x, mObjsFinalPos[i].y, mObjsFinalPos[i].z]}, time, false);
		mAnimator.CreateTransition(mObjsArray[i], objPos, [mObjsFinalPos[i].x, mObjsFinalPos[i].y, mObjsFinalPos[i].z], time, false, 2);
		
		mObjsArray[i].SetRotation(mObjsOrigAngles[i].x, 1,0,0);
		mObjsArray[i].SetRotation(mObjsOrigAngles[i].y, 0,1,0);
		mObjsArray[i].SetRotation(mObjsOrigAngles[i].z, 0,0,1);
		
		mAnimator.CreateRotatingTransition(mObjsArray[i], mObjsOrigAngles[i].x, mObjsFinalAngles[i].x, [1,0,0], time, false, false);
		mAnimator.CreateRotatingTransition(mObjsArray[i], mObjsOrigAngles[i].y, mObjsFinalAngles[i].y, [0,1,0], time, false, false);
		mAnimator.CreateRotatingTransition(mObjsArray[i], mObjsOrigAngles[i].z, mObjsFinalAngles[i].z, [0,0,1], time, false, false);
//		mAnimator.CreateRotatingTransition(mObjsArray[i], mObjsOrigAngles[i].x, mObjsFinalAngles[i].x, [1,0,0], time*3, false, false);
//		mAnimator.CreateRotatingTransition(mObjsArray[i], mObjsOrigAngles[i].y, mObjsFinalAngles[i].y, [0,1,0], time*3, false, false);
//		mAnimator.CreateRotatingTransition(mObjsArray[i], mObjsOrigAngles[i].z, mObjsFinalAngles[i].z, [0,0,1], time*3, false, false);
	}
}

function RandomMeshes::GenerateRandomPositions(boxSize, boxPos){
	var offset = [1*SCALE_FACTOR, 0.5*SCALE_FACTOR, 1*SCALE_FACTOR];
	var randomx = (Rand(boxSize.x*2*1000 -offset.x*1000))/1000 + boxPos.x - boxSize.x +offset.x;
	var randomy = (Rand(boxSize.y*2*1000))/1000 + boxPos.y;
	var randomz = (Rand(boxSize.z*2*1000))/1000+boxPos.z;
	
	return [randomx, randomy, randomz];
}