class Numpad{	
	var mButtonsObjs;
	var mPressedButtonsObjs;
	var mTextsObjs;
	var mButtonColor;
	var mPressedButtonColor;
	var mTextColor;
	
	Draw(drawButtons, drawPressedButtons, drawText);
	GetButtonsObjs();
	GetPressedButtonsObjs();
	GetTextsObjs();
	GetButtonColor();
	GetPressedButtonColor();
	GetTextColor();
};


function Numpad::Numpad(tilesSize, spaceSize, tilesThickness, numpadPosition, buttonColor, pressedButtonColor, textColor){
	mTextsObjs = {};
	mButtonsObjs = {};
	mPressedButtonsObjs = {};
	mButtonColor = buttonColor;
	mPressedButtonColor = pressedButtonColor;
	mTextColor = textColor;
	
	var buttonMesh = CVmNewMesh(VRP_BOX, 1, [-tilesSize/2, -tilesSize/2, 0], [tilesSize/2, tilesSize/2, 0], tilesThickness);
	var offsetY = tilesSize + spaceSize;
	var offsetX = tilesSize + spaceSize;
	var offsetZ = tilesThickness;
	
	var txt;
	var txtObj;
	var buttonObj;
	var num = 9;
	
	for(var i = 1; i < 4; i++){
		for(var j = 1; j < 4; j++){			
			var buttonPos = numpadPosition + [-(offsetX * j), offsetY*i, 0] ;
			txt = CVmText();
			txt.Load(char(48+(num--)));
			txt.SetColor(textColor.r, textColor.g, textColor.b);
			
			txtObj = CVmObj();
			txtObj.LinkToText(txt);
			txtObj.SetScale(0.1,0.1,0.1);
			txtObj.SetPosition(buttonPos.x-(0.1*SCALE_FACTOR), buttonPos.y - (1.65*SCALE_FACTOR), buttonPos.z + 0.05*SCALE_FACTOR);
			
			buttonObj = CVmObj(buttonMesh);
			buttonObj.SetPosition(buttonPos.x, buttonPos.y - (1.5*SCALE_FACTOR), buttonPos.z);	
			
			aadd(mTextsObjs, txtObj);
			aadd(mButtonsObjs, buttonObj);	
		}		
	}
	
}


function Numpad::Draw(drawButtons, drawPressedButtons, drawText){
	if(valtype(drawButtons) == "")
		drawButtons = 1;		
	
	if(valtype(drawText) == "")
		drawText = 1;
		
	if(valtype(drawPressedButtons) == "")
		drawPressedButtons = 0;
		
		if(drawButtons == 1){
			for(var i = 0; i < len(mButtonsObjs); i++)
				mButtonsObjs[i].Draw();			
		}
		
		if(drawPressedButtons == 1){
			for(var i = 0; i < len(mPressedButtonsObjs); i++)
				mPressedButtonsObjs[i].Draw();	
			
		}
		
		if(drawText == 1){
			for(var i = 0; i < len(mTextsObjs); i++)
				mTextsObjs[i].Draw();				
		}
}

function Numpad::GetButtonsObjs(){	
	return mButtonsObjs;
}

function Numpad::GetPressedButtonsObjs(){	
	return mPressedButtonsObjs;
}

function Numpad::GetTextsObjs(){
	return mTextsObjs;
}

function Numpad::GetButtonColor(){
	return mButtonColor;
}

function Numpad::GetPressedButtonColor(){
	return mPressedButtonColor;
}

function Numpad::GetTextColor(){
	return mTextColor;
}