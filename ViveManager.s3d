
class ViveManager
{
	// Camera used for movements
	var mCamera;

	var mHMD;
	
	var mController1;
	var mController2;
	
	var mIsPressingMenuButton;
	
	// Boolean; is true when de debug mode is active
	var mDebugMode;
		
	// Public functions
	UpdateCamera();
	UpdateControllers(openglTranslationOffset);
	SetActiveCamera(camera);
	IsPressingPrimaryButton(controllerIndex);
	IsPressingSecondaryButton(controllerIndex);
	HasPressedMenuButton(controllerIndex);
	VibrateController(controllerIndex);
	GetController(controllerIndex);
};


/*
 * Constructor
 */
function ViveManager::ViveManager(HMD)
{
	// I don't know why, but I have to remove the cursor both here and in the main file of the project, otherwise it doesn't disappear
	ShowCursor(false);
	
	mHMD = HMD;
	
	mController1 = ViveController(1);
	mController2 = ViveController(2);
	
	mIsPressingMenuButton = false;
}


/*
 * This function has to be called at each "updateLogic()" function call. It updates the rotation matrix of the camera, 
 * so it's rotated according to mouse movements
 */
function ViveManager::UpdateCamera()
{	
	mCamera.SetMatrix(mHMD.GetCameraMatrix());
}


function ViveManager::UpdateControllers(openglTranslationOffset)
{
	var controller1Matrix = mHMD.GetControllerMatrix(1);
	var controller2Matrix = mHMD.GetControllerMatrix(2);
	
	var x1 = controller1Matrix[12] - openglTranslationOffset.x;
	var y1 = controller1Matrix[13] - openglTranslationOffset.y;
	var z1 = controller1Matrix[14] - openglTranslationOffset.z;	
	mController1.SetPosition([x1, y1, z1]);

	var x2 = controller2Matrix[12] - openglTranslationOffset.x;
	var y2 = controller2Matrix[13] - openglTranslationOffset.y;
	var z2 = controller2Matrix[14] - openglTranslationOffset.z;
	mController2.SetPosition([x2, y2, z2]);
	
	controller1Matrix[12] = 0;
	controller1Matrix[13] = 0;
	controller1Matrix[14] = 0;
	
	controller2Matrix[12] = 0;
	controller2Matrix[13] = 0;
	controller2Matrix[14] = 0;
	
	mController1.SetRotationMatrix(controller1Matrix);
	mController2.SetRotationMatrix(controller2Matrix);
}


function ViveManager::SetActiveCamera(camera)
{
	mCamera = camera;
}

function ViveManager::IsPressingPrimaryButton(controllerIndex)
{
	return mHMD.IsTriggerPressed(controllerIndex) == 1;
}

function ViveManager::IsPressingSecondaryButton(controllerIndex)
{
	return mHMD.IsTouchpadPressed(controllerIndex) == 1;
}


function ViveManager::HasPressedMenuButton(controllerIndex)
{	
	if(mHMD.IsMenuPressed(controllerIndex) == 1)
	{
		if(!mIsPressingMenuButton)
		{
			mIsPressingMenuButton = true;
			return true;
		}
	}
	else
		mIsPressingMenuButton = false;
		
	return false;
}

function ViveManager::VibrateController(controllerIndex)
{
	return mHMD.VibrateController(controllerIndex, 500);
}

function ViveManager::GetController(controllerIndex)
{
	if(controllerIndex == 1)
		return mController1;
	else if(controllerIndex == 2)
		return mController2;
}
