/*
 * Class that represents a room, with an optional front wall (so that it can be used for portals' rooms, that don't have the front wall so the camera
 * dosn't get obstructed when the room is rendered). It gives more flexibility than simply creating a box, and it's easier to maintain
 */ 
class Room
{
	// Sizes
	var mFarWallWidth;
	var mSideWallWidth;
	var mRoomHeight;
	var mHalfFarWidth;
	var mHalfSideWidth;
	var mHalfHeight;	
	
	// Meshes for the walls. I keep track of them in order to manipulate their shaders
	var mFarWallMesh;
	var mSideWallMesh;
	var mRoofMesh; // Works also as floor
	
	// Walls that compose the room
	var mFrontWallObj;
	var mBackWallObj;
	var mLeftWallObj;
	var mRightWallObj;
	var mRoofObj;
	var mFloorObj;

	// The CVmObj that contains the room
	var mRoom;
	
	// Number of the OpenGL light used to render the room
	var mLightsRangeMin;
	var mLightsRangeMax;
	
	// Boolean that states if the front wall is present
	var mHasFront;
	var mHasFloor;
	var mHasBack;
	var mHasLeft;
	var mHasRight;
	
	// Corners of the room (these are local coordinates)
	var mLowerCornerPosition;
	var mUpperCornerPosition;
	
	var mLowerCornerWorld;
	var mUpperCornerWorld;
	
	// Shader to draw the silhouettes of the objects contained in the room
	var mSilhouetteShader;
	
	// Array that contains any object that is added to the room with the apposite function
	var mChildren;
	
	// Public functions
	Draw(withSilhouetteShader);
	IsPointInRoom(point);
	AddObject(object, x, y, z);
	RemoveObject(object);
	GetObj();
	GetRoomWidth();
	GetRoomDepth();
	GetRoomHeight();
	GetScale();
	SetScale(x, y, z);
	SetLightsRange(min, max);
	GetLightsRange();
	LocalToWorld(point);
	SetPosition(position);
	GetPosition();
	Rotate(angle, x, y, z);
	Translate(x, y, z);
	Hide();
	Unhide();
	CheckIntersection(rayOrigin, rayEnd, contactPoint, normal);
	GetChildren();
	SetMaterial(material);
};

/*
 * Constructor
 * 
 * farWallWidth: (float) width of the front and back wall
 * sideWallWidth: (float) depth of the room
 * height: (float) height of the room
 * centerInOrigin: (boolean) if true, the room is moved to the center of the coordinate system
 * lightsRangeMin: (integer) the min number of the range of opengl lights that have to be used in the cel shader to render the room
 * lightsRangeMax: (integer) the max number of the range of opengl lights that have to be used in the cel shader to render the room
 * hasFront: (boolean) true if there is a front wall, false otherwise
 * hasFloor: (boolean) true if there is the floor, false otherwise
 * hasBack: (boolean) true if there is a back wall, false otherwise
 */
function Room::Room(farWallWidth, sideWallWidth, height, centerInOrigin, lightsRangeMin, lightsRangeMax, hasFront, hasFloor, hasBack, hasLeft, hasRight, useToonShader, useSilhouette)
{
	mFarWallWidth = farWallWidth;
	mSideWallWidth = sideWallWidth;
	mRoomHeight = height;
	useToonShader = valtype(useToonShader) != "B" ? true : useToonShader;
	useSilhouette = valtype(useSilhouette) != "B" ? true : useSilhouette;
	
	mHalfFarWidth = mFarWallWidth / 2.0;
	mHalfSideWidth = mSideWallWidth / 2.0;
	mHalfHeight = mRoomHeight / 2.0;
	
	mHasFront = (valtype(hasFront) == "") ? true : hasFront;
	mHasFloor = (valtype(hasFloor) == "") ? true : hasFloor;
	mHasBack = (valtype(hasBack) == "") ? true : hasBack;
	mHasLeft = (valtype(hasLeft) == "") ? true : hasLeft;
	mHasRight = (valtype(hasRight) == "") ? true : hasRight;
	
	mLightsRangeMin = lightsRangeMin;
	mLightsRangeMax = lightsRangeMax;
	
	// Creating the meshes for the walls; all are perpendicular to the z axis, and will be rotated accordingly later
	mFarWallMesh = CVmNewMesh(VRP_PLANE, 1, [-mHalfFarWidth, -mHalfHeight, 0], [mHalfFarWidth, mHalfHeight, 0], 2, 2);
	mSideWallMesh = CVmNewMesh(VRP_PLANE, 1, [-mHalfSideWidth, -mHalfHeight, 0], [mHalfSideWidth, mHalfHeight, 0], 2, 2);
	mRoofMesh = CVmNewMesh(VRP_PLANE, 1, [-mHalfFarWidth, -mHalfSideWidth, 0], [mHalfFarWidth, mHalfSideWidth, 0], 2, 2);
	
	if(useToonShader){
		AddToonShaderToMesh(mFarWallMesh, [0.5, 0.5, 0.5], [1, 1, 1], [0.0, 0.0, 0.0], 0, lightsRangeMin, lightsRangeMax, SCALE_FACTOR, 1.0);	
		AddToonShaderToMesh(mSideWallMesh, [0.5, 0.5, 0.5], [1, 1, 1], [0.0, 0.0, 0.0], 0, lightsRangeMin, lightsRangeMax, SCALE_FACTOR, 1.0);	
		AddToonShaderToMesh(mRoofMesh, [0.5, 0.5, 0.5], [1, 1, 1], [0.0, 0.0, 0.0], 0, lightsRangeMin, lightsRangeMax, SCALE_FACTOR, 1.0);			
	}
		
	// Created the meshes, time to create the CVmObjects
	mRoofObj = CVmObj(mRoofMesh);
	// Rotating the roof and floor so they get perpendicular to the y axis
	mRoofObj.Rotate(90, 1, 0, 0);
	
	mFrontWallObj = CVmObj(mFarWallMesh);
	mBackWallObj = CVmObj(mFarWallMesh);
	
	mLeftWallObj = CVmObj(mSideWallMesh);
	// Rotating the side walls so they get perpendicular to the x axis
	mLeftWallObj.SetRotation(-90, 0, 1, 0);
	
	mRightWallObj = CVmObj(mSideWallMesh);
	mRightWallObj.SetRotation(90, 0, 1, 0);
	
	mFloorObj = CVmObj(mRoofMesh);
	mFloorObj.Rotate(90, 1, 0, 0);
	
	// Size of the silhouettes lines
	var silhouetteLineWidth = 0.03 * SCALE_FACTOR;

	// Adding the silhouettes lines to every wall in the room, using the function from the "Utils" file
	if(useSilhouette){
		AddSilhouetteLinesToPlanarObject(mFrontWallObj, silhouetteLineWidth, mFarWallWidth, mRoomHeight);
		AddSilhouetteLinesToPlanarObject(mLeftWallObj, silhouetteLineWidth, mSideWallWidth, mRoomHeight);
		AddSilhouetteLinesToPlanarObject(mRightWallObj, silhouetteLineWidth, mSideWallWidth, mRoomHeight);
		AddSilhouetteLinesToPlanarObject(mRoofObj, silhouetteLineWidth, mFarWallWidth, mSideWallWidth);
		AddSilhouetteLinesToPlanarObject(mFloorObj, silhouetteLineWidth, mFarWallWidth, mSideWallWidth);	
		AddSilhouetteLinesToPlanarObject(mBackWallObj, silhouetteLineWidth, mFarWallWidth, mRoomHeight);		
	}
	// Creating the container object. Each wall is translated to ro the right positions, sometimes using little offset so that they're 
	// NOT completely attached; this way the black contour created using the silhouette shader can be seen. These offset values are a bit random
	mRoom = CVmObj();
	if(mHasBack)
		mRoom.AddChild(mBackWallObj, 0, 0, 0 * SCALE_FACTOR);
	else
		mBackWallObj.SetPosition(mRoom.LocalToWorld([0, 0, 0 * SCALE_FACTOR]));	
		
	mRoom.AddChild(mRoofObj, 0, mHalfHeight + 0 * SCALE_FACTOR, mHalfSideWidth);
	
	if(mHasFloor)
		mRoom.AddChild(mFloorObj, 0, -mHalfHeight - 0 * SCALE_FACTOR, mHalfSideWidth);
	else
		mFloorObj.SetPosition(mRoom.LocalToWorld([0, -mHalfHeight - 0 * SCALE_FACTOR, mHalfSideWidth]));
		
	if(mHasLeft)	
		mRoom.AddChild(mLeftWallObj, -mHalfFarWidth, 0, mHalfSideWidth);
	else
		mLeftWallObj.SetPosition(mRoom.LocalToWorld([-mHalfFarWidth, 0, mHalfSideWidth]));
	
	if(mHasRight)	
		mRoom.AddChild(mRightWallObj, mHalfFarWidth, 0, mHalfSideWidth);
	else
		mRightWallObj.SetPosition(mRoom.LocalToWorld([mRightWallObj, mHalfFarWidth, 0, mHalfSideWidth]));
	
	if(mHasFront)
		mRoom.AddChild(mFrontWallObj, 0, 0, mSideWallWidth + 0 * SCALE_FACTOR);
	else
		mFrontWallObj.SetPosition(mRoom.LocalToWorld([0, 0, mSideWallWidth + 0 * SCALE_FACTOR]));	
		
	// Moving the room in the origin if the user chose so
	if(centerInOrigin)
		mRoom.Translate(0, mHalfHeight, -mHalfSideWidth);
		
	// Computing the local coordinates of the bounding box of the room
	mLowerCornerPosition = [-mHalfFarWidth, -mHalfHeight, mSideWallWidth];
	mUpperCornerPosition = [mHalfFarWidth, mHalfHeight, 0];
		
	// Silhouette shader, used to create the black outline in the walls
	mSilhouetteShader = CVmShaderProgram("Shaders/silhouetteShader.glsl");
	
	// List of objects in the room; initially empty. Mind that the children are only useful for drawing, meaning that the Room object will 
	// only make sure to draw its children using the silhouette shader plus any shader they might have, nothing more
	mChildren = {};
}

/*
 * This method draws the room and any objects that was added to it. It makes sure to draw each object's silhouette and on top of it
 * the object itself using any shader that was added to it
 */
function Room::Draw(withSilhouetteShader)
{
	// As default, the silhouette shader isn't used
	if(withSilhouetteShader != Void && withSilhouetteShader)
	{
		// In order to draw the silhouette of a object, I need to first draw a black, bigger version of it (or any color you want for the outline) by culling 
		// the front faces, so that only the back faces gets drawn. This way I can draw later the same object (the normal version) by culling the back faces instead,
		// so that it looks like to be over the black mesh. So first, I state that I want to cull the front faces; only the back faces will be drawn
	    glCullFace(GL_FRONT);
	    
	    // Enabling writes to Z-buffer and the depth test, in case these weren't active
	    glDepthMask(GL_TRUE); 
	    glEnable(GL_DEPTH_TEST); 
	    
	    // I decativate the wall's shader. Actually, I DON'T want to use the silhouette shader for the walls, but if I don't deactivate their shader, 
	    // the silhouette shader has no effect on the other objects, I've no idea why. To avoid this proble, I deactivate their shader but HIDE their meshes,
	    // so that they won't actually be drawn with the silhouette shader, but the other objects in the room will
		mFarWallMesh.ShaderActivate(false);
	    mSideWallMesh.ShaderActivate(false);
	    mRoofMesh.ShaderActivate(false);
	    
	    // Temporarely hide their meshes, in order to not render them with the silhouette shader
	    mFarWallMesh.HideAll();
	    mSideWallMesh.HideAll();
	    mRoofMesh.HideAll();
	    
	    // For each child, I check if the child has a mesh (so if the child is a CVmObj linked to a mesh); if that's so, I deactivate the mesh's shader.
	    // I need to check if there is a mesh since the child could be a Text, or things like that, that do not have a mesh linked.
	    // Note that I don't deactivate the shader for the walls, because I don't want to draw them with the silhouette shader
		foreach(var child in mChildren)
		{
			if(child.GetMesh() != Void)
				child.GetMesh().ShaderActivate(false);
		}
	   
	    // Starting the silhouette shader
	    mSilhouetteShader.Start();
	    	// Setting its parameter; the offset tells the shader how the size of the mesh has to increase
	    	mSilhouetteShader.SetParameter("offset", 0.06 * SCALE_FACTOR);
	    	mSilhouetteShader.SetParameter("color", [0.0, 0.0, 0.0]);
	    	
	    	// Drawing the silhouette of the room and of any objects in it
			mRoom.Draw();
		mSilhouetteShader.Stop();
		
		// Now I enable back faces culling, since I'm ready to draw the normal version of the room
		glCullFace(GL_BACK); 
		
		// I reactivate the shaders of any mesh in the room
		mFarWallMesh.ShaderActivate(true);
	    mSideWallMesh.ShaderActivate(true);
	    mRoofMesh.ShaderActivate(true);
	    
	    mFarWallMesh.UnhideAll();
	    mSideWallMesh.UnhideAll();
	    mRoofMesh.UnhideAll();
		
	    // I reactivate the shaders of any mesh in the room
	    foreach(var child in mChildren)
		{
			if(child.GetMesh() != Void)
				child.GetMesh().ShaderActivate(true);
		}
	
	}
	
	// And finally draw the room
	mRoom.Draw();
}

/*
 * This method checks where the given ray intersects the world, and returns true if that position is valid for the player
 * 
 * rayOrigin: (vector) starting point of the ray
 * rayEnd: (vector) starting point of the ray
 * contactPoint: (vector) if the ray intersects something, this parameter will be filled up with the information (needs to be passed as reference, with &)
 * normal: (vector) if the ray intersects something, this parameter will be filled up with the normal to the intersected plane (needs to be passed as reference, with &)
 * 
 * The method returns:
 * -1 -> if no interception was found
 *  0 -> if it intercepts the floor
 *  1 -> if it intercepts the back wall
 *  2 -> if it intercepts the roof
 *  3 -> if it intercepts the left wall
 *  4 -> if it intercepts the right wall
 *  5 -> if it intercepts the front wall
 */
function Room::CheckIntersection(rayOrigin, rayEnd, contactPoint, normal)
{	
	// At first I state that no intersection was found
	var intersectedObject = -1;
	var contactPointTmp;
	var normalTmp;
	var planePoint;
	
	

	// To find the interception of a plane I first need one of its point: I get the coordinates of the floor first. Since it's a child of the mRoom object
	// I need to add its position (NOTE: this will work only if the room is NOT a child of something else); I then add 1 to make sure that
	// the plane is considered inside the room
	planePoint = mFloorObj.GetPosition() + GetPosition() + [0, 1 * SCALE_FACTOR, 0];
	
	// I compute the normal of the plane
	normalTmp = ComputeNormalOfPlanarObject(mFloorObj);
		
	// I check for interceptions
	contactPointTmp = FindIntersectionInPlane(rayOrigin, rayEnd, planePoint, normalTmp);
	
	// If one was found and it's inside the room (remember, planes are infinite, so maybe there was an interception but outside the room, so it's no good)
	// I return the 0 to indicate that
	if(contactPointTmp != Void && IsPointInRoom(contactPointTmp))
	{
		contactPointTmp -= [0, 1 * SCALE_FACTOR, 0];
		intersectedObject = 0;
		
		contactPoint = contactPointTmp;
		normal = normalTmp;
	}	
		
		
	/* Back wall */
	if(mHasBack)
	{
		planePoint = mBackWallObj.GetPosition() + GetPosition() + [0, 0, 1 * SCALE_FACTOR];
		normalTmp = ComputeNormalOfPlanarObject(mBackWallObj);
		
		contactPointTmp = FindIntersectionInPlane(rayOrigin, rayEnd, planePoint, normalTmp);
		
		if(contactPointTmp != Void && IsPointInRoom(contactPointTmp))
		{
			// Firt I remove the point I added in order to make sure that the plane point was in the room
			contactPointTmp -= [0, 0, 1 * SCALE_FACTOR];
			
			// If there was an intersection before and I found one in the rest of the elevator, I need to check which one "wins", i.e. which one
			// is closest to the player (in this case the origin of the ray)
			if(intersectedObject != -1)
			{
				var previousDistance = Modulus(contactPoint - rayOrigin);
				var currentDistance = Modulus(contactPointTmp - rayOrigin);
				
				// If the new distance is lesser, it wins
				if(currentDistance < previousDistance)
				{
					intersectedObject = 1;
					contactPoint = contactPointTmp;
					normal = normalTmp;
				}
			}
			// If before there was no intersection, I update the values with the current ones
			else
			{
				intersectedObject = 1;
				contactPoint = contactPointTmp;
				normal = normalTmp;
			}
		}
	}
	
		
	/* Roof */
	planePoint = mRoofObj.GetPosition() + GetPosition() + [0, -1 * SCALE_FACTOR, 0];
	normalTmp = ComputeNormalOfPlanarObject(mRoofObj);
	
	contactPointTmp = FindIntersectionInPlane(rayOrigin, rayEnd, planePoint, normalTmp);
	
	if(contactPointTmp != Void && IsPointInRoom(contactPointTmp))
	{
		contactPointTmp -= [0, -1 * SCALE_FACTOR, 0];
		
		if(intersectedObject != -1)
		{
			var previousDistance = Modulus(contactPoint - rayOrigin);
			var currentDistance = Modulus(contactPointTmp - rayOrigin);
			
			if(currentDistance < previousDistance)
			{
				intersectedObject = 2;
				contactPoint = contactPointTmp;
				normal = normalTmp;
			}
		}
		else
		{
			intersectedObject = 2;
			contactPoint = contactPointTmp;
			normal = normalTmp;
		}
	}
		
	/* Left wall */
	planePoint = mLeftWallObj.GetPosition() + GetPosition() + [1 * SCALE_FACTOR, 0, 0];
	normalTmp = ComputeNormalOfPlanarObject(mLeftWallObj);
	
	contactPointTmp = FindIntersectionInPlane(rayOrigin, rayEnd, planePoint, normalTmp);
	
	if(contactPointTmp != Void && IsPointInRoom(contactPointTmp))
	{
		contactPointTmp -= [1 * SCALE_FACTOR, 0, 0];
		
		if(intersectedObject != -1)
		{
			var previousDistance = Modulus(contactPoint - rayOrigin);
			var currentDistance = Modulus(contactPointTmp - rayOrigin);
			
			if(currentDistance < previousDistance)
			{				
				intersectedObject = 3;
				contactPoint = contactPointTmp;
				normal = normalTmp;
			}
		}
		else
		{
			intersectedObject = 3;
			contactPoint = contactPointTmp;
			normal = normalTmp;
		}
	}
		
	/* Right wall */
	planePoint = mRightWallObj.GetPosition() + GetPosition() + [-1 * SCALE_FACTOR, 0, 0];
	normalTmp = ComputeNormalOfPlanarObject(mRightWallObj);
	
	contactPointTmp = FindIntersectionInPlane(rayOrigin, rayEnd, planePoint, normalTmp);
	
	if(contactPointTmp != Void && IsPointInRoom(contactPointTmp))
	{
		contactPointTmp -= [-1 * SCALE_FACTOR, 0, 0];
		
		if(intersectedObject != -1)
		{
			var previousDistance = Modulus(contactPoint - rayOrigin);
			var currentDistance = Modulus(contactPointTmp - rayOrigin);
			
			if(currentDistance < previousDistance)
			{
				intersectedObject = 4;
				contactPoint = contactPointTmp;
				normal = normalTmp;
			}
		}
		else
		{
			intersectedObject = 4;
			contactPoint = contactPointTmp;
			normal = normalTmp;
		}
	}
		
	/* Front wall */
	if(mHasFront)
	{
		planePoint = mFrontWallObj.GetPosition() + GetPosition() + [0, 0, -1 * SCALE_FACTOR];
		normalTmp = ComputeNormalOfPlanarObject(mFrontWallObj);
		
		contactPointTmp = FindIntersectionInPlane(rayOrigin, rayEnd, planePoint, normalTmp);
		
		if(contactPointTmp != Void && IsPointInRoom(contactPointTmp))
		{
			contactPointTmp -= [0, 0, -1 * SCALE_FACTOR];
			
			if(intersectedObject != -1)
			{
				var previousDistance = Modulus(contactPoint - rayOrigin);
				var currentDistance = Modulus(contactPointTmp - rayOrigin);
				
				if(currentDistance < previousDistance)
				{
					intersectedObject = 5;
					contactPoint = contactPointTmp;
					normal = normalTmp;
				}
			}
			else
			{
				intersectedObject = 5;
				contactPoint = contactPointTmp;
				normal = normalTmp;
			}
		}
	}
	
	return intersectedObject;
}

/*
 * This method checks whether the point passed as parameter is in the room or not
 * 
 * point: (vector) the point, in world coordinates
 */
function Room::IsPointInRoom(point)
{
	mLowerCornerWorld = mRoom.LocalToWorld(mLowerCornerPosition);
	mUpperCornerWorld = mRoom.LocalToWorld(mUpperCornerPosition);
	
	// I check if the point is in the bounding box, using the world coordinates. I'm also using little offset to account for the fact that 
	// the walls are not completely attached, so the bounding box is a little bit bigger
	return (point.x >= mLowerCornerWorld.x + 0.5 * SCALE_FACTOR && point.x <= mUpperCornerWorld.x - 0.5 * SCALE_FACTOR) &&
    	   (point.y >= mLowerCornerWorld.y + 0.5 * SCALE_FACTOR && point.y <= mUpperCornerWorld.y - 0.5 * SCALE_FACTOR) &&
       	   (point.z <= mLowerCornerWorld.z - 0.5 * SCALE_FACTOR && point.z >= mUpperCornerWorld.z + 0.5 * SCALE_FACTOR);


//	return (point.x >= mLowerCornerWorld.x - 0.5 && point.x <= mUpperCornerWorld.x + 0.5) &&
//    	   (point.y >= mLowerCornerWorld.y - 0.5 && point.y <= mUpperCornerWorld.y + 0.5) &&
//       	   (point.z <= mLowerCornerWorld.z + 0.5 && point.z >= mUpperCornerWorld.z - 0.5);
}

/*
 * Method that adds an object fo the room. Mind that the children are only useful for drawing, meaning that the Room object will 
 * only make sure to draw its children using the silhouette shader plus any shader they might have, nothing more
 */
function Room::AddObject(object, x, y, z)
{
	mRoom.AddChild(object, x, y, z);
	
	aadd(mChildren, object);
}


function Room::RemoveObject(object)
{
	mRoom.RemoveChild(object);
}

function Room::GetObj()
{
	return mRoom;
}

function Room::GetRoomWidth()
{
	return mFarWallWidth;
}

function Room::GetRoomDepth()
{
	return mSideWallWidth;
}

function Room::GetRoomHeight()
{
	return mRoomHeight;
}

function Room::GetScale()
{
	return mRoom.GetScale();
}

function Room::SetScale(x, y, z)
{
	mRoom.SetScale(x, y, z);
}

function Room::SetLightsRange(min, max)
{
	mFarWallMesh.ShaderSetParameter(0, "lightsRangeMin", 0, min);
	mFarWallMesh.ShaderSetParameter(0, "lightsRangeMax", 0, max);
	mSideWallMesh.ShaderSetParameter(0, "lightsRangeMin", 0, min);
	mSideWallMesh.ShaderSetParameter(0, "lightsRangeMax", 0, max);
	mRoofMesh.ShaderSetParameter(0, "lightsRangeMin", 0, min);
	mRoofMesh.ShaderSetParameter(0, "lightsRangeMax", 0, max);
	
	foreach(var child in mChildren)
	{
		if(child.GetMesh() != Void)
		{
			child.GetMesh().ShaderSetParameter(0, "lightsRangeMin", 0, min);
			child.GetMesh().ShaderSetParameter(0, "lightsRangeMax", 0, max);
		}
	}
	
	mLightsRangeMin = min;
	mLightsRangeMax = max;
}

function Room::GetLightsRange()
{
	return [mLightsRangeMin, mLightsRangeMax];
}

function Room::SetPosition(position)
{
	mRoom.SetPosition(position);
}

function Room::Translate(x, y, z)
{
	mRoom.Translate(x, y, z);
}

function Room::Rotate(angle, x, y, z)
{
	mRoom.Rotate(angle, x, y, z);
}


function Room::GetPosition()
{
	return mRoom.GetPosition();
}


function Room::LocalToWorld(point)
{
	return mRoom.LocalToWorld(point);
}

function Room::Hide()
{
	return mRoom.Hide();
}

function Room::Unhide()
{
	return mRoom.Unhide();
}

function Room::GetChildren()
{
	return mChildren;
}

function Room::SetMaterial(material){
	mFarWallMesh.SetMaterial(material);
	mSideWallMesh.SetMaterial(material);
	mRoofMesh.SetMaterial(material);
}