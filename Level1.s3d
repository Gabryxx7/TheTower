
#define STATUS_ELEVATOR_MOVING 0
#define STATUS_ELEVATOR_ARRIVED 1
#define STATUS_LEVEL_STARTED 2

// The multiplier used to speedup the objects when the player uses the clock
#define TIME_CLOCK_VELOCITY_MULTIPLIER 3.0

//#include <Utils.s3d>
#include <Clock.s3d>
#include <MarcelloUtils.s3d>

class Level1
{
	// Booleans that indicate if the level is starting or ending
	var mEnding;
	var mIsLevelCompleted;
	var mEndTimer;
	
	var mLevelStatus;
	
	// Manager for user inputs
	var mInputManager;
	
	// "Animator" object; used to create transitions and rotations for the objects
	var mAnimator;
	
	// "SoundManager" object; used to play the music and sounds. May need to move this to the "GameManager" class in the future, since it's more like a global thing
	var mSoundManager;
	
	// Active camera
	var mCamera;
	
	// Lights used to render the scene. mLight0 is used to render the portals' rooms, while mLight1 is used to render the "normal" scene
	var mLight0;
	var mLight1;
	var mLight2;
	
	
	// "Room" object that contains the whole room
	var mMainRoom;
	
	// Shader to display silhouettes around object. Normally a "Room" object would to that, but the portals are a special case, and we need to manually
	// draw the silhouettes for the portals' frames
	var mSilhouetteShader;
	
	// Booleans that indicate whether the elevator has appeared and if it's already open or not
	var mIsElevatorPresent;
	var mIsElevatorOpen;
	
	// "Room" object that represent the elevator
	var mElevator;
	
	var mElevatorFinalPosition;
	var mElevatorTravelDistance;
	var mElevatorTravelTime;
	var mCameraYoffset;
	
	
	var mIsUsingClock;
	
	var mMainClock;
	var mTimeDirection;
	
	
	var mClocks;
	var mNumberOfClocks;
	var mNumberOfClockRows;
	
	// Private functions
	DrawAllPortals();
	DrawPortal(portalFrame, portalRoom);
	FadeToBlackScreen(fadeIn);
	
	intersect3D_SegmentPlane( p0, p1, v0, normal);
	
	Selection(object);
	
	// Public functions
	Init(lights, elevator);
	Render();
	UpdateLogic(dt);
	IsLevelCompleted();
	GetElevator();
	IsPointedPositionValid(rayOrigin, rayEnd, contactPoint, normal, isWall);
};


/*
 * Constructor. Takes as parameter the input manager of the application
 */
function Level1::Level1(inputManager, soundManager)
{		
	mInputManager = inputManager;
	mSoundManager = soundManager;
	
	// Creating the main room
	mMainRoom = Room(ROOM_FAR_WALL_WIDTH, ROOM_SIDE_WALL_WIDTH, ROOM_HEIGHT, true, true, 1, 2);
	
	// Instantiating the silhouette shader, to draw outlines
	mSilhouetteShader = CVmShaderProgram("silhouetteShader.glsl");
		

	mMainClock = Clock(1, 2);
	mMainClock.Translate(0, 5, 14);
	
	var num_seg = 30;
	var radius = 2;
	var hemisphere = 1;  // 0.5 = hemisphere, 1 = sphere
	var sphereMesh1 = CVmNewMesh(VRP_SPHERE , num_seg, radius, hemisphere);  
	global var sphere = CVmObj(sphereMesh1);
	sphere.SetPosition(0, 5, 20);
	
}


 
 function Level1::Init(lights, elevator)
{	
	foreach(var light in lights)
		light.Disable();
	
	mLight0 = lights[0];
	mLight0.SetPosition([-10.0, 10.0, 10.0] + [0, -100, 0]);
	mLight0.SetDiffuse(1, 1, 1);
	mLight0.Enable();
	
	mLight1 = lights[1];
	mLight1.SetPosition([0, 10.0, 10.0]);
	mLight1.SetDiffuse(1, 1, 1);
	mLight1.Enable();
	
	mLight2 = lights[2];
	mLight2.SetPosition([0, 10.0, -20.0]);
//	mLight2.SetDiffuse(1, 1, 1);
	mLight2.Enable();
	
		
	mElevator = elevator;
	mElevator.SetLightsRange(0,0);
	
	// Retrieving the input manager and setting the initial camera's position
	mCamera = mInputManager.GetActiveCamera();
	
	// Creating the object that will handle transitions and rotations of objects
	mAnimator = Animator();

	
	mEnding = false;
	mIsLevelCompleted = false;
	
	mElevatorTravelDistance = 100.0;
	mElevatorTravelTime = !DEBUG_MODE ? 15.0 : 3.0;
	
	
	mElevatorFinalPosition = mElevator.GetPosition();
	
	var lightPos = mLight1.GetPosition();
	
	mAnimator.CreateTransition(mElevator, mElevatorFinalPosition + [0, -mElevatorTravelDistance, 0], mElevatorFinalPosition, mElevatorTravelTime, false);
//	mAnimator.CreateTransition(mLight1, lightPos + [0, -100, 0], lightPos, 20.0, false);
	
	mCameraYoffset = mCamera.GetPosition().y - openglTranslationOffset.y - mElevatorFinalPosition.y;
	
	mLevelStatus = STATUS_ELEVATOR_MOVING;
	
	mIsUsingClock = false;
	
	
		
	var first = sphere.GetPosition();
	var second = first + [0, 0, 6];
	var third = second + [4.5, 0, 0];
	var fourth  = third + [0, 0, -6];
	var fifth  = fourth + [1, 0, 2];
	
	mAnimator.CreateTransition(sphere, first, {second, third, fourth, fifth}, 3.0, true);
//	mAnimator.CreateTransition(sphere, first, {second, third, fourth}, 10.0, true);
//	mAnimator.CreateTransition(sphere, first, {second, third}, 1.0, true);
	
//	mAnimator.CreateTransition(sphere, first, second, 1.0, true);

	global var flyingFuck2 = Text("Flying Fact");
	flyingFuck2.SetPosition(sphere.GetPosition() + [-3, 0, 0]);
	flyingFuck2.Rotate(90, 0, 1, 0);

	// Transition and rotation for the flying fuck
	mAnimator.CreateRotatingTransition(flyingFuck2, 0, (360*5 + 180), [0, 1, 0], 40.0, false, false);
	
	mTimeDirection = 1;
	
	mNumberOfClocks = 6;
	mNumberOfClockRows = 4;
	mClocks = {};
	
	var step = mMainRoom.GetRoomWidth()/mNumberOfClocks;
	var heightStep = mMainRoom.GetRoomHeight()/mNumberOfClockRows;
	
	for(var i = 0; i < mNumberOfClockRows; i++)
	{
		for(var j = 0; j < mNumberOfClocks; j++)
		{
			aadd(mClocks, Clock(1, 2));
			
			// These coordinates are used if the clocks aren't put as children of the main room; I'll leave it for now as a reminder
//			var x = 0 + (mMainRoom.GetRoomWidth()/2.0 - 2.0) - step * (j - mNumberOfClocks/2) - mMainRoom.GetRoomWidth()/2.0 - (step/2.0)*(i % 2);
//			var y = mMainRoom.GetRoomHeight() - 4.0 - heightStep*i;
//			var z = mMainRoom.GetRoomDepth()/2.0 - 0.3;

			var x = 0 + (mMainRoom.GetRoomWidth()/2.0 - 2.0) - step * (j - mNumberOfClocks/2) - mMainRoom.GetRoomWidth()/2.0 - (step/2.0)*(i % 2);
			var y = (mMainRoom.GetRoomHeight()/ 2.0 - 3.0 - heightStep*i) ;
			var z = mMainRoom.GetRoomDepth() - 0.3;
			
			var position = [x, y, z];
		
			position.x += Rand(1) == 0 ? Rand(8)/30.0 : -Rand(8)/30.0;
			position.y += Rand(1) == 0 ? Rand(8)/10.0 : -Rand(8)/10.0;
			
			var newClock = mClocks[i*mNumberOfClocks + j];
			
//			newClock.SetPosition(position);
			
			mAnimator.CreateRotatingTransition(newClock.GetMinutesArrowObj(), 0, (360), [0, 0, 1], 10.0, true, false);
			mAnimator.CreateRotatingTransition(newClock.GetHoursArrowObj(), 0, (360), [0, 0, 1], 80.0, true, false);
			
			mMainRoom.AddObject(newClock.GetObj(), position.x, position.y, position.z);
		}
	}
	
	
	var pyramidHeight = 3;
	var pyramidMesh1 = CVmNewMesh(VRP_POLYGONAL_PYRAMID, 120, 2, pyramidHeight);
	var pyramidMesh2 = CVmNewMesh(VRP_POLYGONAL_PYRAMID, 120, 2, pyramidHeight);
	
	pyramidMesh1.ShaderAdd("toonShader.glsl", 0);
	pyramidMesh1.ShaderActivate(true);
	pyramidMesh1.ShaderSetParameter(0, "ambient", 0, [0.04, 0.04, 0.04]);
	pyramidMesh1.ShaderSetParameter(0, "diffuse", 0, [0.9, 0.1, 0.1]);
	pyramidMesh1.ShaderSetParameter(0, "specular", 0, [5.0, 3.0, 3.0]);
	pyramidMesh1.ShaderSetParameter(0, "shininess", 0, 50);
	pyramidMesh1.ShaderSetParameter(0, "lightsRangeMin", 0, mMainRoom.GetLightsRange().x);
	pyramidMesh1.ShaderSetParameter(0, "lightsRangeMax", 0, mMainRoom.GetLightsRange().y);
	
	pyramidMesh2.ShaderAdd("toonShader.glsl", 0);
	pyramidMesh2.ShaderActivate(true);
	pyramidMesh2.ShaderSetParameter(0, "ambient", 0, [0.04, 0.04, 0.04]);
	pyramidMesh2.ShaderSetParameter(0, "diffuse", 0, [0.1, 0.9, 0.9]);
	pyramidMesh2.ShaderSetParameter(0, "specular", 0, [5.0, 3.0, 3.0]);
	pyramidMesh2.ShaderSetParameter(0, "shininess", 0, 50);
	pyramidMesh2.ShaderSetParameter(0, "lightsRangeMin", 0, mMainRoom.GetLightsRange().x);
	pyramidMesh2.ShaderSetParameter(0, "lightsRangeMax", 0, mMainRoom.GetLightsRange().y);
	
	var pyramidObj1 = CVmObj(pyramidMesh1); 
	var pyramidObj2 = CVmObj(pyramidMesh2);  

	
	global var pyramidObj = CVmObj();
	pyramidObj.AddChild(pyramidObj1, 0, 0, 0);
	pyramidObj.AddChild(pyramidObj2, 0, 0, 0);
//	pyramidObj2.SetPivotPoint(0, pyramidHeight, 0);
	pyramidObj2.Rotate(180, 0, 0, 1);
	pyramidObj2.Translate(0, pyramidHeight/2.0 + 0.47, 0);
	
	
	
	mMainRoom.AddObject(pyramidObj, mMainRoom.GetRoomWidth()/2.0 - 5.0, mMainRoom.GetRoomHeight() / 2.0 - 5.0, mMainRoom.GetRoomDepth() - 10.0);
	
	var waypoint0 = pyramidObj.GetPosition();
	var waypoint1 = waypoint0 + [-mMainRoom.GetRoomWidth()/2.0 - 10.0, 0, 0];
	var waypoint2 = waypoint1 + [0, 0, -mMainRoom.GetRoomDepth()/2.0 - 10.0];
	var waypoint3 = waypoint2 + [mMainRoom.GetRoomWidth()/2.0 - 10.0, 0, 0];
	
	print({"waypoint0", "waypoint2"}, {waypoint0, waypoint2});
	
	mAnimator.CreateTransition(pyramidObj, waypoint0, {waypoint1, waypoint2, waypoint3}, 5.0, true);
	mAnimator.CreateRotatingTransition(pyramidObj, 0, 360, [1, 0, 0], 5.0, true, false);
	
	mAnimator.CreateRotatingTransition(pyramidObj1, 0, 360, [0, 1, 0], 10.0, true, false);
	mAnimator.CreateRotatingTransition(pyramidObj2, 0, -360, [0, 1, 0], 10.0, true, false);
}


/* ****************************************************** *
 * **************** RENDER METHODS ********************** *
 * ****************************************************** */

/*
 * Render method
 */
function Level1::Render()
{	
	mLight1.SetPosition([0, 10.0, 35.0] + openglTranslationOffset);
	mLight2.SetPosition([0, 10.0, -20.0] + openglTranslationOffset);
	
	switch(mLevelStatus)
	{
		case STATUS_ELEVATOR_MOVING:
			break;
		case STATUS_ELEVATOR_ARRIVED:
		case STATUS_LEVEL_STARTED:
			mMainRoom.Draw();
			mMainClock.Draw();
			sphere.Draw();
			flyingFuck2.Draw();
			break;
	}
	
	// The elevator is always present, so it's always drawn
	mElevator.Draw();
}


/* ****************************************************** *
 * **************** LOGIC METHODS ********************** *
 * ****************************************************** */
  
/*
 * Updates the logic of the game
 * 
 * dt: (float) delta time, i.e. the time between the last update and this one
 */
function Level1::UpdateLogic(dt)
{
	// First off, let's update the player's position and orientation
	mInputManager.UpdateCameraOrientation();
	mInputManager.UpdateCameraPosition();
	
	var cameraPosition = mCamera.GetPosition() - openglTranslationOffset;
	
	switch(mLevelStatus)
	{
		// This is the case where the level is starting and the elevator is moving up
		case STATUS_ELEVATOR_MOVING: 
		{			
		    // I make sure that the camera doesn't go out of the elevator while it's going up
		    if(!mElevator.IsPointInElevator(cameraPosition))
		    	mInputManager.RestoreCameraPosition();
			
			var elevatorPos = mElevator.GetPosition();
	
			// I check if the elevator is halfway through the transtition; if this is the case, I change its lights range for the rendering (but only
			// if I didn't do so already)
			if(abs(elevatorPos.y) < (mElevatorFinalPosition.y + mElevatorTravelDistance)/2 && mElevator.GetLightsRange().y < 1)
				 mElevator.SetLightsRange(1,2);
			
			// I make sure that the camera goes up with the elevator by increasing the y along with the elevator's
			cameraPosition.y = mCameraYoffset + elevatorPos.y;
	   	    
			// To make the shaking camera effect, I randomly move the x and y axis with random values
		    cameraPosition.y += Rand(1) == 0 ? Rand(8)/500.0 : -Rand(8)/500.0;
		    cameraPosition.x += Rand(1) == 0 ? Rand(8)/500.0 : -Rand(8)/500.0;
			
			// I set the new (shaken and at level with the elevator) position
			mCamera.SetPosition(cameraPosition + openglTranslationOffset);
			
			// I check if the elevator reached its destination, and if this is so I open the door and change status
			if(elevatorPos.y >= mElevatorFinalPosition.y)
			{
				var leftDoorPos = mElevator.GetLeftDoor().GetPosition();
				var rightDoorPos = mElevator.GetRightDoor().GetPosition();
				
				mAnimator.CreateTransition(mElevator.GetLeftDoor(), leftDoorPos, mElevator.GetLeftDoorOpenPosition(), 2.0, false);
				mAnimator.CreateTransition(mElevator.GetRightDoor(), rightDoorPos, mElevator.GetRightDoorOpenPosition(), 2.0, false);
				
				mLevelStatus = STATUS_ELEVATOR_ARRIVED;
			}
	
			break;
		}		
		// This is the case where the elevator arrived, BUT the player is still inside
		case STATUS_ELEVATOR_ARRIVED:
		{
			// I check if the player goes out from the elevator. Note: I'm not checking that he exits from the doors; he can pass through walls right now.
			// If the player comes out, I close the doors and change status
			if(!mElevator.IsPointInElevator(cameraPosition))
			{
				var leftDoorPos = mElevator.GetLeftDoor().GetPosition();
				var rightDoorPos = mElevator.GetRightDoor().GetPosition();

				mAnimator.CreateTransition(mElevator.GetLeftDoor(), leftDoorPos, mElevator.GetLeftDoorClosedPosition(), 2.0, false);
				mAnimator.CreateTransition(mElevator.GetRightDoor(), rightDoorPos, mElevator.GetRightDoorClosedPosition(), 2.0, false);
								
				mLevelStatus = STATUS_LEVEL_STARTED;
			}
			
			break;
		}
		// Case where the player is out of the elevator. It's the main status of the level
		case STATUS_LEVEL_STARTED:
		{
			// I make sure that the player stay's inside the room and outside of the elevator
//			if(mElevator.IsPointInElevator(cameraPosition) || !mMainRoom.IsPointInRoom(cameraPosition))
//		    	mInputManager.RestoreCameraPosition();
				 
			// I check if the user has clicked with the mouse or whatever; if that is the case I need to check "where" he clicked    	
	    	if(mInputManager.IsPressingPrimaryButton())
	    	{
	    		// I get the ray that starts from the camera and goes until the end of the rendering plane. Basically I take a ray in the direction
	    		// the user is facing. It doesn't really matter where the ray ends, it's the starting point and its direction that really count.
	    		// But to be safe I make sure that the ray ends "at the end of time"
	    		var raycastOrigin = cameraPosition;
	    		var raycastEnd = raycastOrigin + mCamera.GetDirection() * mCamera.GetZFar();
	    		
	    		// I check if the clock was selected
	    		var contactPoint = IsObjectSelected(raycastOrigin, raycastEnd, mMainClock);
	    		
	    		// If the clock wasn't being used and there actually is a contact point on the clock, I state that the player is using it
	    		if(!mIsUsingClock && contactPoint != Void)
	    			mIsUsingClock = true;
	    		
	    		// If the player is using the clock...
	    		if(mIsUsingClock)
    			{    				
    				// I update the clock's arrow with regards on the direction of the previously computed ray
					mMainClock.UpdateMinutesArrow(raycastOrigin, raycastEnd);
					
					// I get the resulting direction that the arrow moved to (1: clockwise, -1: counter-clockwise, 0: didn't move)
					var timeDirection = mMainClock.GetArrowDirection();
					
					// If the direction found is different from the current direction, and the direction found wasn't 0 (in that case the arrow is still)...
					if(mTimeDirection != timeDirection && timeDirection != 0)
					{
						// ...I invert the active transitions; ALL of them. I also save the new time direction
						mAnimator.InvertTransitions();
						mTimeDirection = timeDirection;
					}
					
					// I change the scale factor of the objects, to speed them up. I always take the positive value of the direction.
					// Note that when the arrow is still, timeDirection will be 0, so in that case the scale factor becomes 0 and the object stay still
					mAnimator.ChangeScaleFactors(abs(timeDirection) * TIME_CLOCK_VELOCITY_MULTIPLIER);
    			}
	    	}
	    	// If there are no clicks...
	    	else
	    	{
	    		// The player was using the clock, now he isn't anymore
	    		if(mIsUsingClock)
	    		{
		    		mIsUsingClock = false;
	    		
		    		// If the player is not using the clock anymore I also set the speed of the objects back to normal.
		    		// Note: I don't invert make the direction go as default: the objects keep going in the direction they were going
		    		mAnimator.ChangeScaleFactors(1);
	    		}
    		}
	    		
			break;
		}
	}
		
	// I update the methods of the managers
	mAnimator.UpdateTransitions(dt);
	mSoundManager.UpdateMusic(dt);
}


function Level1::IsPointedPositionValid(rayOrigin, rayEnd, contactPoint, normal, isWall)
{
	var intersectedPlane = -1;

	intersectedPlane = mElevator.CheckIntersection(rayOrigin, rayEnd, &contactPoint, &normal);

	if(intersectedPlane == -1)
		intersectedPlane = mMainRoom.CheckIntersection(rayOrigin, rayEnd, &contactPoint, &normal);
		
	isWall = true;
	
	return intersectedPlane == 0;
}


/*
 * Method called by the GameManager to check if the level is completed
 */
function Level1::IsLevelCompleted()
{
	return mIsLevelCompleted;
}


