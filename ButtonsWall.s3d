class ButtonsWall{
	var mSize;
	var mPos;
	var mOffset;
	var mAmountx;
	var mAmounty;
	var mMesh;
	var mObjs;
	var mMeshes;
	var mSpacing;	
	var mDirection;
	var mMinimumPos;
	var mMaximumPos;
	var mWaypoints;
	var mIsAnimating;
	var mCodePositions;
	var mBorderShader;
	var mMeshSizes;
	var mBaseColor;
	var mCodeColor;
	var mActiveColor;
	var mMovingColor;
	
	var mActiveObjIndex;
	var mActiveButtonBorderObj;
	var mIsMoving;
	var mDistance;
	var mExtrudeFactor;
	
	Draw();
	ComputeAnimations(num);
	StartAnimation(animator);
	StopAnimation(animator);
	ComputeCode(amount, maxRow);
	IsCompleted();
	IsInRangeOfActiveButton(objPos, range);
	MoveButtonInRange(movingObjPos, isVr, controller);
	StopMoving();
	SetActiveCOlor(color);
	SetCodeColor(color);
	SetDefaultColor(color);
	SetMovingColor(color);
	IsAnimating();
	IsNotInWallRange(pos, range);
	ActivateClosestButton(objPos, range);
};

function ButtonsWall::ButtonsWall(size, spacing, pos, offset, amount, direction, baseColor, codeColor, activeColor, movingColor){
	mSize = size;
	mPos = pos;
	mOffset = offset;
	mAmountx = valtype(amount) == "V" ? amount.x : amount;
	mAmounty = valtype(amount) == "V" ? amount.y : amount;
	mSpacing = spacing;
	mDirection = direction;
	mIsAnimating = false;
	mActiveObjIndex = -1;
	mIsMoving = false;
	mDistance = -1;
	mExtrudeFactor = 0.95;
	
	
	mBaseColor = valtype(baseColor) != "" ? baseColor : [1,1,1];
	mCodeColor = valtype(codeColor) != "" ? codeColor : [1,0,0];
	mActiveColor = valtype(activeColor) != "" ? activeColor : [1,1,0];
	mMovingColor = valtype(movingColor) != "" ? movingColor : [0,0,1];
		
	mBorderShader = CVmShaderProgram("void main(void) { gl_Position = ftransform(); }", "uniform vec3 color; void main (void) { gl_FragColor = vec4(color, 1.0); }", true);
	
	mMaximumPos = {};
	mMinimumPos = {};
	mObjs = {};
	mMeshes = {};
	mCodePositions = {};
	mMeshSizes = {};
	
	if(mDirection == 1){
		mMeshSizes = {[-size.x/2, -size.y/2, -size.z/2], [size.x/2, size.y/2, size.z/2]};
	}	
	else if(mDirection == 2){
		mMeshSizes = {[-size.z/2, -size.y/2, -size.x/2], [size.z/2, size.y/2, size.x/2]};	
	}
	else if(mDirection == -1){
		mMeshSizes = {[-size.x/2, -size.y/2, -size.z/2], [size.x/2, size.y/2, size.z/2]};
	}
	else if(mDirection == -2){
		mMeshSizes = {[-size.z/2, -size.y/2, -size.x/2], [size.z/2, size.y/2, size.x/2]};	
	}
	
	var obj;
	var mesh;
	var buttonPos = [0,0,0];
	
	for(var i = 0; i < mAmounty; i++){
		buttonPos.y = (spacing+size.y)*i;
		buttonPos.x = 0;
		for(var j = 0; j < mAmountx; j++){
			buttonPos.x += spacing+size.x;	
			mesh = CvmNewMesh(VRP_BOX, 1, mMeshSizes[0], mMeshSizes[1]);				
			obj = CvmObj(mesh);	
			
			if(mDirection == 1){	
				obj.SetPosition(mPos + mOffset + [buttonPos.x, buttonPos.y, buttonPos.z]);
				aadd(mMinimumPos, obj.GetPosition());
				aadd(mMaximumPos, obj.GetPosition() + [0,0,mSize.z*mExtrudeFactor]);
			}	
			else if(mDirection == 2){
				obj.SetPosition(mPos + mOffset + [buttonPos.z, buttonPos.y, buttonPos.x]);	
				aadd(mMinimumPos, obj.GetPosition());
				aadd(mMaximumPos, obj.GetPosition() + [mSize.z*mExtrudeFactor,0,0]);	
			}
			else if(mDirection == -1){
				obj.SetPosition(mPos + mOffset + [buttonPos.x, buttonPos.y, buttonPos.z]);	
				aadd(mMinimumPos, obj.GetPosition());
				aadd(mMaximumPos, obj.GetPosition() + [0,0,-mSize.z*mExtrudeFactor]);		
			}
			else if(mDirection == -2){	
				obj.SetPosition(mPos + mOffset + [buttonPos.z, buttonPos.y, buttonPos.x]);
				aadd(mMinimumPos, obj.GetPosition());
				aadd(mMaximumPos, obj.GetPosition() + [-mSize.z*mExtrudeFactor,0,0]);			
			}
			
			AddToonShaderToMesh(mesh, [1, 1, 1], mBaseColor, [0.1, 0.1, 0.1], 20, 0, 2, SCALE_FACTOR, 1.0);
//			AddSilhouetteLinesToPlanarObject(obj, 0.02 * SCALE_FACTOR, size.x, size.y);
			
			aadd(mObjs, obj);
			aadd(mMeshes, mesh);
		}
	}	
	mActiveButtonBorderObj = CvmObj(CvmNewMesh(VRP_BOX, 1, mMeshSizes[0], mMeshSizes[1]));
	mActiveButtonBorderObj.SetScale(1.02, 1.02, 1.02);
}

function ButtonsWall::Draw(){
	for(var i = 0; i < len(mObjs); i++){
			mObjs[i].Draw(VR_NO_CULLING);			
	}
	
	if(mActiveObjIndex > 0){
		mActiveButtonBorderObj.SetPosition(mObjs[mActiveObjIndex].GetPosition());
    	glCullFace (GL_FRONT);
    	
    	mBorderShader.Start();
    		mBorderShader.SetParameter("color", mIsMoving ? mMovingColor : mActiveColor);
			mActiveButtonBorderObj.Draw();
		mBorderShader.Stop();
	
		glCullFace (GL_BACK);		
	}
}

function ButtonsWall::ComputeCode(amount, rowRange){
	var maxRow = valtype(rowRange) == "I" ? rowRange : rowRange[1];
	var minRow = valtype(rowRange) == "I" ? 0 : (rowRange[0] > 0 ? (rowRange[0]-1) : 0);
	var distance = 0;
	for(var i = 0; i < amount; i++){
		
		var randomNum = -1;
		var alreadyExtracted = true;
		while(alreadyExtracted){
			randomNum = Rand(maxRow*mAmountx - minRow*mAmountx-1)+(minRow*mAmountx);
			alreadyExtracted = false;
			foreach(var extractedNum in mCodePositions)
				if(extractedNum == randomNum){
					alreadyExtracted = true;
					break;
				}		
		}
		outputln("EXTRACTED: " +str(randomNum));
		aadd(mCodePositions, randomNum);
			
		mObjs[randomNum].GetMesh().ShaderSetParameter(0, "diffuse", 0, mCodeColor);
		if(mDirection == 1){
			mObjs[randomNum].SetPosition(mMinimumPos[randomNum]+[0,0,mSize.z*mExtrudeFactor]);
			distance = abs(mObjs[randomNum].GetPosition().z - mMinimumPos[randomNum].z)/(abs(mMinimumPos[randomNum].z-mMaximumPos[randomNum].z));	
			mObjs[randomNum].GetMesh().ShaderSetParameter(0, "diffuse", 0, [mBaseColor.r*(1-distance) + mCodeColor.r*(distance), mBaseColor.g*(1-distance) + mCodeColor.g*(distance), mBaseColor.b*(1-distance) + mCodeColor.b*(distance)]);
		}
		else if(mDirection == -1){
			mObjs[randomNum].SetPosition(mMinimumPos[randomNum]+[0,0,-mSize.z*mExtrudeFactor]);
			distance = abs(mObjs[randomNum].GetPosition().z - mMinimumPos[randomNum].z)/(abs(mMinimumPos[randomNum].z-mMaximumPos[randomNum].z));	
			mObjs[randomNum].GetMesh().ShaderSetParameter(0, "diffuse", 0, [mBaseColor.r*(1-distance) + mCodeColor.r*(distance), mBaseColor.g*(1-distance) + mCodeColor.g*(distance), mBaseColor.b*(1-distance) + mCodeColor.b*(distance)]);
		}
		else if(mDirection == 2){
			mObjs[randomNum].SetPosition(mMinimumPos[randomNum]+[mSize.z*mExtrudeFactor,0,0]);
			distance = abs(mObjs[randomNum].GetPosition().x - mMinimumPos[randomNum].x)/(abs(mMinimumPos[randomNum].x-mMaximumPos[randomNum].x));	
			mObjs[randomNum].GetMesh().ShaderSetParameter(0, "diffuse", 0, [mBaseColor.r*(1-distance) + mCodeColor.r*(distance), mBaseColor.g*(1-distance) + mCodeColor.g*(distance), mBaseColor.b*(1-distance) + mCodeColor.b*(distance)]);
		}
		else if(mDirection == -2){
			mObjs[randomNum].SetPosition(mMinimumPos[randomNum]+[-mSize.z*mExtrudeFactor,0,0]);
			distance = abs(mObjs[randomNum].GetPosition().x - mMinimumPos[randomNum].x)/(abs(mMinimumPos[randomNum].x-mMaximumPos[randomNum].x));	
			mObjs[randomNum].GetMesh().ShaderSetParameter(0, "diffuse", 0, [mBaseColor.r*(1-distance) + mCodeColor.r*(distance), mBaseColor.g*(1-distance) + mCodeColor.g*(distance), mBaseColor.b*(1-distance) + mCodeColor.b*(distance)]);
		}
		
	}
}

function ButtonsWall::ComputeAnimations(num){
	mWaypoints = {};	
	
	for(var i = 0; i < len(mObjs); i++){
		var objWaypoints = {};
		for(var j = 0; j < num; j++){			
			var offset = Rand(8)+2;		
			var finalOffset = [0,0,0];
			if(mDirection == 1){
				finalOffset = [0,0,offset*SCALE_FACTOR];		
			}
			else if(mDirection == -1){
				finalOffset = [0,0,-offset*SCALE_FACTOR];
			}
			else if(mDirection == 2){
				finalOffset = [offset*SCALE_FACTOR, 0,0];			
			}
			else if(mDirection == -2){
				finalOffset = [-offset*SCALE_FACTOR, 0,0];			
			}
			
			aadd(objWaypoints, mMinimumPos[i]+finalOffset);
			aadd(objWaypoints, mMinimumPos[i]);
		}
		aadd(mWaypoints, objWaypoints);
	}
}

function ButtonsWall::StartAnimation(animator){	
	if(!mIsAnimating){
		mIsAnimating = true;
		for(var i = 0; i < len(mObjs); i++){					
			var mAnimationTime = Rand(200)/(100);
			mAnimationTime += 0.7;	
						
			animator.CreateTransition(mObjs[i], mMinimumPos[i], mWaypoints[i], mAnimationTime, true);
		}		
	}
}

function ButtonsWall::IsAnimating(){
	return mIsAnimating;
}

function ButtonsWall::StopAnimation(animator){	
	if(mIsAnimating){
		mIsAnimating = false;
		for(var i = 0; i < len(mObjs); i++){					
			var mAnimationTime = Rand(200)/(100);
			mAnimationTime += 0.7;	
			animator.CreateTransition(mObjs[i], mObjs[i].GetPosition(), mMinimumPos[i], mAnimationTime, false);
		}	
	}
}

function ButtonsWall::IsCompleted(){
	return len(mCodePositions) < 1;
}

function ButtonsWall::MoveButtonInRange(movingObjPos, isVr, controller){
	var vrCheck = true;
	if(isVr){
		if(!controller.IsCollidingBBox(mObjs[mActiveObjIndex])){
			vrCheck = false;
		}
	}
	if(mActiveObjIndex > 0 && vrCheck){
		mIsMoving = true;
		var pos = mObjs[mActiveObjIndex].GetPosition();
		var minPos = mMinimumPos[mActiveObjIndex];
		var maxPos = mMaximumPos[mActiveObjIndex];
		var newPos = [0,0,0];
		var maxDistance = 0;
		var distance = 0;
		var buttonPressed = false;
		
		if(mDirection == 1){
			if(isVr)
				newPos = [pos.x, pos.y, movingObjPos.z-mSize.z*0.5];
			else
				newPos = [pos.x, pos.y, movingObjPos.z-mSize.z*0.5-mDistance];
			if(newPos.z >= minPos.z && newPos.z <= maxPos.z){
				mObjs[mActiveObjIndex].SetPosition(newPos);	
				maxDistance = abs(maxPos.z - minPos.z);
				distance = abs(newPos.z - minPos.z)/maxDistance;	
				mObjs[mActiveObjIndex].GetMesh().ShaderSetParameter(0, "diffuse", 0, [mBaseColor.r*(1-distance) + mCodeColor.r*(distance), mBaseColor.g*(1-distance) + mCodeColor.g*(distance), mBaseColor.b*(1-distance) + mCodeColor.b*(distance)]);			
			}
			
			if(distance <= 0 && (newPos.z <= minPos.z + 0.15))
				buttonPressed = true;
		}
		else if(mDirection == 2){
			if(isVr)
				newPos = [movingObjPos.x-mSize.z*0.5, pos.y, pos.z];
			else
				newPos = [movingObjPos.x-mSize.z*0.5-mDistance, pos.y, pos.z];
			if(newPos.x >= minPos.x && newPos.x <= maxPos.x){
				mObjs[mActiveObjIndex].SetPosition(newPos);	
				maxDistance = abs(maxPos.x - minPos.x);
				distance = abs(newPos.x - minPos.x)/maxDistance;	
				mObjs[mActiveObjIndex].GetMesh().ShaderSetParameter(0, "diffuse", 0, [mBaseColor.r*(1-distance) + mCodeColor.r*(distance), mBaseColor.g*(1-distance) + mCodeColor.g*(distance), mBaseColor.b*(1-distance) + mCodeColor.b*(distance)]);			
			}
			
			if(distance <= 0 && (newPos.x <= minPos.x + 0.15))
				buttonPressed = true;
		}
		else if(mDirection == -1){
			if(isVr)
				newPos = [pos.x, pos.y, movingObjPos.z+mSize.z*0.5];
			else
				newPos = [pos.x, pos.y, movingObjPos.z+mSize.z*0.5-mDistance];
			if(newPos.z >= maxPos.z && newPos.z <= minPos.z){
				mObjs[mActiveObjIndex].SetPosition(newPos);	
				maxDistance = abs(maxPos.z - minPos.z);
				distance = abs(newPos.z - minPos.z)/maxDistance;	
				mObjs[mActiveObjIndex].GetMesh().ShaderSetParameter(0, "diffuse", 0, [mBaseColor.r*(1-distance) + mCodeColor.r*(distance), mBaseColor.g*(1-distance) + mCodeColor.g*(distance), mBaseColor.b*(1-distance) + mCodeColor.b*(distance)]);
			}
			
			if(distance <= 0 && (newPos.z >= minPos.z - 0.15))
				buttonPressed = true;
		}
		else if(mDirection == -2){
			if(isVr)
				newPos = [movingObjPos.x+mSize.z*0.5, pos.y, pos.z];
			else
				newPos = [movingObjPos.x+mSize.z*0.5-mDistance, pos.y, pos.z];
			if(newPos.x >= maxPos.x && newPos.x <= minPos.x){
				mObjs[mActiveObjIndex].SetPosition(newPos);	
				maxDistance = abs(maxPos.x - minPos.x);
				distance = abs(newPos.x - minPos.x)/maxDistance;	
				mObjs[mActiveObjIndex].GetMesh().ShaderSetParameter(0, "diffuse", 0, [mBaseColor.r*(1-distance) + mCodeColor.r*(distance), mBaseColor.g*(1-distance) + mCodeColor.g*(distance), mBaseColor.b*(1-distance) + mCodeColor.b*(distance)]);
			}	
			
			if(distance <= 0 && (newPos.x >= minPos.x - 0.15))
				buttonPressed = true;
		}
		
		if(buttonPressed){
			for(var i = 0; i < len(mCodePositions); i++){
				if(mCodePositions[i] == mActiveObjIndex){
					adel(mCodePositions, i);
					mActiveObjIndex = -1;
					return true;
				}
			}
		}
		
		return false;		
	}
	else{		
		mIsMoving = false;
		return false;
	}
		
}

function ButtonsWall::StopMoving(){
	mIsMoving = false;
}

function ButtonsWall::IsInRangeOfActiveButton(objPos, range){
	if(!mIsMoving){
		var distance = 0;
		var buttonPos = 0;
		var minDistance = range*1000;
		var foundIndex = -1;
		
		foreach(var index in mCodePositions){
			buttonPos = mObjs[index].GetPosition();
			if(mDirection == 1){
				buttonPos += [0,0,mSize.z*0.5];
			}
			else if(mDirection == -1){
				buttonPos += [0,0,-mSize.z*0.5];
			}
			else if(mDirection == 2){
				buttonPos += [mSize.z*0.5,0,0];
			}
			else if(mDirection == -2){
				buttonPos += [-mSize.z*0.5,0,0];
			}
			
			//If I check the y, the lowest or highest blocks will never be counted
			distance = sqrt((objPos.x-buttonPos.x)^2 + (objPos.z-buttonPos.z)^2 + (objPos.y-buttonPos.y)^2);
//			distance = sqrt((objPos.x-buttonPos.x)^2 + (objPos.z-buttonPos.z)^2);
			if(distance <= range && distance < minDistance){
//				outputln(str(distance) +" " +str(range));
				
				if(abs(mDirection) == 1 ){
					mDistance = objPos.z-buttonPos.z;				
				}else if(abs(mDirection) == 2){
					mDistance = objPos.x-buttonPos.x;						
				}
				
				minDistance = distance;
				foundIndex = index;
			}
		}
		
		mActiveObjIndex = foundIndex;
		
		return mActiveObjIndex > -1;	
	}
	else{
		return true;
	}
}

function ButtonsWall::SetDefaultColor(color){
	mBaseColor = color;
	foreach(var obj in mObjs){
		obj.GetMesh().ShaderSetParameter(0, "diffuse", 0, mBaseColor);		
	}
	
	foreach(var index in mCodePositions){	
		var distance = abs(mObjs[index].GetPosition().z - mMinimumPos[index].z)/(abs(mMaximumPos[index].z - mMinimumPos[index].z));	
		mObjs[index].GetMesh().ShaderSetParameter(0, "diffuse", 0, [mBaseColor.r*(1-distance) + mCodeColor.r*(distance), mBaseColor.g*(1-distance) + mCodeColor.g*(distance), mBaseColor.b*(1-distance) + mCodeColor.b*(distance)]);	
	}
}

function ButtonsWall::SetActiveColor(color){
	 mActiveColor = color;
}

function ButtonsWall::SetMovingColor(color){
	 mMovingColor = color;
}

function ButtonsWall::SetCodeColor(color){
	 mCodeColor = color;
	 foreach(var index in mCodePositions){
		var distance = abs(mObjs[index].GetPosition().z - mMinimumPos[index].z)/(abs(mMaximumPos[index].z - mMinimumPos[index].z));	
		mObjs[index].GetMesh().ShaderSetParameter(0, "diffuse", 0, [mBaseColor.r*(1-distance) + mCodeColor.r*(distance), mBaseColor.g*(1-distance) + mCodeColor.g*(distance), mBaseColor.b*(1-distance) + mCodeColor.b*(distance)]);	
	}
}

function ButtonsWall::IsNotInWallRange(pos, range){
	if(mDirection == 1){
		return pos.z >= (mPos.z + mOffset.z + mSize.z*mExtrudeFactor + range);
	}else if(mDirection == -1){
		return pos.z <= (mPos.z + mOffset.z - mSize.z*mExtrudeFactor - range);
	}else if(mDirection == 2){
		return pos.x >= (mPos.x + mOffset.x + mSize.z*mExtrudeFactor + range);
	}else if(mDirection == -2){
		return pos.x <= (mPos.x + mOffset.x - mSize.z*mExtrudeFactor - range);
	}
}

function ButtonsWall::ActivateClosestButton(objPos, range){
	if(!mIsMoving){
		var distance = 0;
		var buttonPos = 0;
		var minDistance = range*1000;
		var foundIndex = -1;
		
		for(var index = 0; index < len(mObjs); index++){
			buttonPos = mObjs[index].GetPosition();
			if(mDirection == 1){
				buttonPos += [0,0,mSize.z*0.5];
			}
			else if(mDirection == -1){
				buttonPos += [0,0,-mSize.z*0.5];
			}
			else if(mDirection == 2){
				buttonPos += [mSize.z*0.5,0,0];
			}
			else if(mDirection == -2){
				buttonPos += [-mSize.z*0.5,0,0];
			}
			
			//If I check the y, the lowest or highest blocks will never be counted
			distance = sqrt((objPos.x-buttonPos.x)^2 + (objPos.z-buttonPos.z)^2 + (objPos.y-buttonPos.y)^2);
//			distance = sqrt((objPos.x-buttonPos.x)^2 + (objPos.z-buttonPos.z)^2);
			if(distance <= range && distance < minDistance){
//				outputln(str(distance) +" " +str(range));
				
				if(abs(mDirection) == 1 ){
					mDistance = objPos.z-buttonPos.z;				
				}else if(abs(mDirection) == 2){
					mDistance = objPos.x-buttonPos.x;						
				}
				
				minDistance = distance;
				foundIndex = index;
			}
		}
		
		mActiveObjIndex = foundIndex;
		
		return mActiveObjIndex > -1;	
	}
	else{
		return true;
	}
}

