class ButtonsWall{
	var mSize;
	var mPos;
	var mOffset;
	var mAmountx;
	var mAmounty;
	var mMesh;
	var mObjs;
	var mMeshes;
	var mSpacing;	
	var mDirection;
	var mInitialPos;
	var mWaypoints;
	var mIsAnimating;
	var mCodePositions;
	
	Draw();
	ComputeAnimations(num);
	StartAnimation(animator);
	StopAnimation(animator);
	ComputeCode(amount, maxRow);
};

function ButtonsWall::ButtonsWall(size, spacing, pos, offset, amount, direction){
	mSize = size;
	mPos = pos;
	mOffset = offset;
	mAmountx = valtype(amount) == "V" ? amount.x : amount;
	mAmounty = valtype(amount) == "V" ? amount.y : amount;
	mSpacing = spacing;
	mDirection = direction;
	mIsAnimating = false;
	
	mInitialPos = {};
	mObjs = {};
	mMeshes = {};
	mCodePositions = {};
	
	
	var obj;
	var mesh;
	var buttonPos = [0,0,0];
	
	for(var i = 0; i < mAmounty; i++){
		buttonPos.y = (spacing+size.y)*i;
		buttonPos.x = 0;
		for(var j = 0; j < mAmountx; j++){
			buttonPos.x += spacing+size.x;			
			
			if(direction == 1){
				mesh = CvmNewMesh(VRP_BOX, 1, [-size.x/2, -size.y/2, -size.z/2], [size.x/2, size.y/2, size.z/2]);	
				obj = CvmObj(mesh);		
				obj.SetPosition(mPos + mOffset + [buttonPos.x, buttonPos.y, buttonPos.z]);
			}	
			else if(direction == 2){
				mesh = CvmNewMesh(VRP_BOX, 1, [-size.z/2, -size.y/2, -size.x/2], [size.z/2, size.y/2, size.x/2]);	
				obj = CvmObj(mesh);		
				obj.SetPosition(mPos + mOffset + [buttonPos.z, buttonPos.y, buttonPos.x]);				
			}
			else if(direction == -1){
				mesh = CvmNewMesh(VRP_BOX, 1, [-size.x/2, -size.y/2, -size.z/2], [size.x/2, size.y/2, size.z/2]);	
				obj = CvmObj(mesh);		
				obj.SetPosition(mPos + mOffset + [buttonPos.x, buttonPos.y, buttonPos.z]);			
			}
			else if(direction == -2){
				mesh = CvmNewMesh(VRP_BOX, 1, [-size.z/2, -size.y/2, -size.x/2], [size.z/2, size.y/2, size.x/2]);	
				obj = CvmObj(mesh);		
				obj.SetPosition(mPos + mOffset + [buttonPos.z, buttonPos.y, buttonPos.x]);				
			}
			
			AddToonShaderToMesh(mesh, [1, 1, 1], [0.8, 0.8, 0.8], [0.1, 0.1, 0.1], 20, 0, 2, SCALE_FACTOR, 1.0);
//			AddSilhouetteLinesToPlanarObject(obj, 0.02 * SCALE_FACTOR, size.x, size.y);
			
			aadd(mInitialPos, obj.GetPosition());
			aadd(mObjs, obj);
			aadd(mMeshes, mesh);
		}
	}	
}

function ButtonsWall::Draw(){
	foreach(var obj in mObjs){
		obj.Draw(VR_NO_CULLING);
	}
}

function ButtonsWall::ComputeCode(amount, maxRow){
	for(var i = 0; i < amount; i++){
		var randomNum = Rand(maxRow*mAmountx);
		aadd(mCodePositions, randomNum);
		mObjs[randomNum].GetMesh().ShaderSetParameter(0, "diffuse", 0, [1,0,0]);
		
		if(mDirection == 1){
			mObjs[randomNum].SetPosition(mInitialPos[randomNum]+[0,0,mSize.z*0.5]);
		}
		else if(mDirection == -1){
			mObjs[randomNum].SetPosition(mInitialPos[randomNum]+[0,0,-mSize.z*0.5]);
		}
		else if(mDirection == 2){
			mObjs[randomNum].SetPosition(mInitialPos[randomNum]+[mSize.z*0.5,0,0]);
		}
		else if(mDirection == -2){
			mObjs[randomNum].SetPosition(mInitialPos[randomNum]+[-mSize.z*0.5,0,0]);
		}
	}
}

function ButtonsWall::ComputeAnimations(num){
	mWaypoints = {};	
	
	for(var i = 0; i < len(mObjs); i++){
		var objWaypoints = {};
		for(var j = 0; j < num; j++){			
			var offset = Rand(8)+2;		
			var finalOffset = [0,0,0];
			if(mDirection == 1){
				finalOffset = [0,0,offset*SCALE_FACTOR];		
			}
			else if(mDirection == -1){
				finalOffset = [0,0,-offset*SCALE_FACTOR];
			}
			else if(mDirection == 2){
				finalOffset = [offset*SCALE_FACTOR, 0,0];			
			}
			else if(mDirection == -2){
				finalOffset = [-offset*SCALE_FACTOR, 0,0];			
			}
			
			aadd(objWaypoints, mInitialPos[i]+finalOffset);
			aadd(objWaypoints, mInitialPos[i]);
		}
		aadd(mWaypoints, objWaypoints);
	}
}

function ButtonsWall::StartAnimation(animator){	
	if(!mIsAnimating){
		mIsAnimating = true;
		for(var i = 0; i < len(mObjs); i++){					
			var mAnimationTime = Rand(200)/(100);
			mAnimationTime += 0.7;	
						
			animator.CreateTransition(mObjs[i], mInitialPos[i], mWaypoints[i], mAnimationTime, true);
		}		
	}
}

function ButtonsWall::StopAnimation(animator){	
	if(mIsAnimating){
		mIsAnimating = false;
		for(var i = 0; i < len(mObjs); i++){					
			var mAnimationTime = Rand(200)/(100);
			mAnimationTime += 0.7;	
			animator.CreateTransition(mObjs[i], mObjs[i].GetPosition(), mInitialPos[i], mAnimationTime, false);
		}	
	}
}